[{"path":"/articles/SIAMCAT_confounder.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About This Vignette","title":"Example dataset with Confoundering","text":", demonstrate standard workflow SIAMCAT package using example dataset Nielsen et al. Nat Biotechnol 2014. dataset contains samples patients inflammatory bowel disease controls. importantly, samples collected two different countries, Spain Denmark. Together technical differences samples, introduces potent confounding factor data. going explore SIAMCAT identify confounding factor results account confounder .","code":""},{"path":"/articles/SIAMCAT_confounder.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Example dataset with Confoundering","text":"First, load packages needed perform analyses.","code":"library(\"tidyverse\") library(\"SIAMCAT\") library(\"ggpubr\")"},{"path":"/articles/SIAMCAT_confounder.html","id":"preparations","dir":"Articles","previous_headings":"","what":"Preparations","title":"Example dataset with Confoundering","text":"two different ways access data example dataset. one hand, available curatedMetagenomicsData R package. However, using create many dependencies SIAMCAT package. Therefore, use data available EMBL cluster. SIAMCAT paper, performed presented analyses datasets available curatedMetagenomicsData. want reproduce analysis SIAMCAT paper, can execute code chunks curatedMetageomicsData section, otherwise execute code mOTUs2 section.","code":""},{"path":"/articles/SIAMCAT_confounder.html","id":"curatedmetagenomicsdata","dir":"Articles","previous_headings":"","what":"curatedMetagenomicsData","title":"Example dataset with Confoundering","text":"First, load package:","code":"library(\"curatedMetagenomciData\")"},{"path":"/articles/SIAMCAT_confounder.html","id":"metadata","dir":"Articles","previous_headings":"curatedMetagenomicsData","what":"Metadata","title":"Example dataset with Confoundering","text":"data part combined_metadata One thing keep mind repeated samples per subject (see also Machine learning pitfalls vignette). subjects () sampled multiple times. Therefore, want remove repeated samplings subject, since samples otherwise indepdenent another. visit number encoded sampleID. Therefore, can use information extract samples taken use first visit subject. Now, can restrict metadata samples UC healthy control samples: last step, can adjust column names metadata agree data available EMBL cluster. Also, add rownames dataframe since SIAMCAT needs rownames match samples across metadata features.","code":"meta.nielsen.full <- combined_metadata %>%      filter(dataset_name=='NielsenHB_2014') print(length(unique(meta.nielsen.full$subjectID))) print(nrow(meta.nielsen.full)) meta.nielsen <- meta.nielsen.full %>%     select(sampleID, subjectID, study_condition, disease_subtype,         disease, age, country, number_reads, median_read_length, BMI) %>%     mutate(visit=str_extract(sampleID, '_[0-9]+$')) %>%     mutate(visit=str_remove(visit, '_')) %>%     mutate(visit=as.numeric(visit)) %>%     mutate(visit=case_when(is.na(visit)~0, TRUE~visit)) %>%     group_by(subjectID) %>%     filter(visit==min(visit)) %>%     ungroup() %>%     mutate(Sample_ID=sampleID) %>%     mutate(Group=case_when(disease=='healthy'~'CTR',                             TRUE~disease_subtype)) meta.nielsen <- meta.nielsen %>%     filter(Group %in% c('UC', 'CTR')) meta.nielsen <- meta.nielsen %>%     mutate(Country=country) meta.nielsen <- as.data.frame(meta.nielsen) rownames(meta.nielsen) <- meta.nielsen$sampleID"},{"path":"/articles/SIAMCAT_confounder.html","id":"taxonomic-profiles","dir":"Articles","previous_headings":"curatedMetagenomicsData","what":"Taxonomic Profiles","title":"Example dataset with Confoundering","text":"can load taxonomic profiles generated MetaPhlAn2 via curatedMetagenomicsData R package. MetaPhlAn2 profiles contain information different taxonomic levels. Therefore, want restrict species-level profiles. second step, convert relative abundances (summing 1) instead using percentages (summing 100) MetaPhlAn2 outputs. feature names long may bit un-wieldy plotting later , shorten species name:","code":"x <- 'NielsenHB_2014.metaphlan_bugs_list.stool' feat <- curatedMetagenomicData(x=x, dryrun=FALSE) feat <- feat[[x]]@assayData$exprs feat <- feat[grep(x=rownames(feat), pattern='s__'),] feat <- feat[grep(x=rownames(feat),pattern='t__', invert = TRUE),] feat <- t(t(feat)/100) rownames(feat) <- str_extract(rownames(feat), 's__.*$')"},{"path":"/articles/SIAMCAT_confounder.html","id":"motus2-profiles","dir":"Articles","previous_headings":"","what":"mOTUs2 Profiles","title":"Example dataset with Confoundering","text":"metadata features available EMBL cluster:","code":"# base url for data download data.location <- 'https://www.embl.de/download/zeller/metaHIT/' ## metadata meta.nielsen <- read_tsv(paste0(data.location, 'meta_Nielsen.tsv')) ## Rows: 396 Columns: 9 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \"\\t\" ## chr (5): Sample_ID, Individual_ID, Country, Gender, Group ## dbl (4): Sampling_day, Age, BMI, Library_Size ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # also here, we have to remove repeated samplings and CD samples meta.nielsen <- meta.nielsen %>%     filter(Group %in% c('CTR', 'UC')) %>%     group_by(Individual_ID) %>%     filter(Sampling_day==min(Sampling_day)) %>%     ungroup() %>%     as.data.frame() rownames(meta.nielsen) <- meta.nielsen$Sample_ID  ## features feat <- read.table(paste0(data.location, 'metaHIT_motus.tsv'),                      stringsAsFactors = FALSE, sep='\\t',                     check.names = FALSE, quote = '', comment.char = '') feat <- feat[,colSums(feat) > 0] feat <- prop.table(as.matrix(feat), 2)"},{"path":"/articles/SIAMCAT_confounder.html","id":"the-siamcat-object","dir":"Articles","previous_headings":"","what":"The SIAMCAT Object","title":"Example dataset with Confoundering","text":"Now, everything ready create SIAMCAT object stores feature matrix, meta-variables, label. , label created using information metadata. demonstrate normal SIAMCAT workflow, remove confounding factor looking samples Spain. , look happened removed .","code":"# remove Danish samples meta.nielsen.esp <- meta.nielsen[meta.nielsen$Country == 'ESP',] sc.obj <- siamcat(feat=feat, meta=meta.nielsen.esp, label='Group', case='UC') ## + starting create.label ## Label used as case: ##    UC ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.021 s ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 128 sample(s). ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.395 s"},{"path":"/articles/SIAMCAT_confounder.html","id":"filtering","dir":"Articles","previous_headings":"","what":"Filtering","title":"Example dataset with Confoundering","text":"Now, can filter feature low overall abundance prevalence.","code":"sc.obj <- filter.features(sc.obj, cutoff=1e-04,                             filter.method = 'abundance') ## Features successfully filtered sc.obj <- filter.features(sc.obj, cutoff=0.05,                             filter.method='prevalence',                             feature.type = 'filtered') ## Features successfully filtered"},{"path":"/articles/SIAMCAT_confounder.html","id":"association-plot","dir":"Articles","previous_headings":"","what":"Association Plot","title":"Example dataset with Confoundering","text":"check.assocation function calculates significance enrichment metrics association (generalized fold change single-feautre AUROC).","code":"sc.obj <- check.associations(sc.obj, detect.lim = 1e-06, alpha=0.1,                              max.show = 20,plot.type = 'quantile.rect',                             panels = c('fc'),                             fn.plot = './association_plot_nielsen.pdf')"},{"path":"/articles/SIAMCAT_confounder.html","id":"confounder-analysis","dir":"Articles","previous_headings":"","what":"Confounder Analysis","title":"Example dataset with Confoundering","text":"can also check supplied meta-variables potential confounding.  function produces one plot meta-variable. , show example body mass index (BMI). BMI distributions look similar controls UC cases, unlikely BMI confound analyses.","code":"check.confounders(sc.obj, fn.plot = './confounders_nielsen.pdf') ## ++ remove metadata variables, since all subjects have the same value ##  Country ## Finished checking metadata for confounders, results plotted to: ./confounders_nielsen.pdf"},{"path":"/articles/SIAMCAT_confounder.html","id":"machine-learning-workflow","dir":"Articles","previous_headings":"","what":"Machine Learning Workflow","title":"Example dataset with Confoundering","text":"machine learning workflow can easily implemented SIAMCAT. contains following steps: Feature normalization Data splitting cross-validation Model training Making model predictions (left-data) Evaluating model predictions (using AUROC AUPRC)","code":"sc.obj <- normalize.features(sc.obj, norm.method = 'log.std',                             norm.param = list(log.n0=1e-06, sd.min.q=0)) ## Features normalized successfully. sc.obj <- create.data.split(sc.obj, num.folds = 5, num.resample = 5) ## Features splitted for cross-validation successfully. sc.obj <- train.model(sc.obj, method='lasso') ## Trained lasso models successfully. sc.obj <- make.predictions(sc.obj) ## Made predictions successfully. sc.obj <- evaluate.predictions(sc.obj) ## Evaluated predictions successfully."},{"path":"/articles/SIAMCAT_confounder.html","id":"model-evaluation-plot","dir":"Articles","previous_headings":"Machine Learning Workflow","what":"Model Evaluation Plot","title":"Example dataset with Confoundering","text":"model evaluation plot produce one plot ROC curve another one precision-recall curve (shown ).","code":"model.evaluation.plot(sc.obj, fn.plot = './eval_plot_nielsen.pdf') ## Plotted evaluation of predictions successfully to: ./eval_plot_nielsen.pdf"},{"path":"/articles/SIAMCAT_confounder.html","id":"model-interpretation-plot","dir":"Articles","previous_headings":"Machine Learning Workflow","what":"Model Interpretation Plot","title":"Example dataset with Confoundering","text":"model interpretation plot can give additional information trained machine learning model. show : feature importance barplot, feature robustness (many models repeated cross-validation feature selected model), normalized feature abundances across samples heatmap, optional metadata heatmap , boxplot showing proportion model weight explained selected features.","code":"model.interpretation.plot(sc.obj, consens.thres = 0.8,                             fn.plot = './interpret_nielsen.pdf') ## Successfully plotted model interpretation plot to: ./interpret_nielsen.pdf"},{"path":"/articles/SIAMCAT_confounder.html","id":"confounder-analysis-1","dir":"Articles","previous_headings":"","what":"Confounder Analysis","title":"Example dataset with Confoundering","text":"already mentioned , Nielsen dataset contains samples Spain Denmark. SIAMCAT alerted us ?","code":"table(meta.nielsen$Group, meta.nielsen$Country) ##       ##       DNK ESP ##   CTR 177  59 ##   UC    0  69"},{"path":"/articles/SIAMCAT_confounder.html","id":"country-confounder","dir":"Articles","previous_headings":"","what":"Country Confounder","title":"Example dataset with Confoundering","text":"First, create SIAMCAT object , time including Danish controls: confounder plot show us meta-variable “country” might problematic:","code":"sc.obj.full <- siamcat(feat=feat, meta=meta.nielsen,                         label='Group', case='UC') ## + starting create.label ## Label used as case: ##    UC ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.001 s ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 291 sample(s). ## + Removed 14 samples from the label object... ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.578 s sc.obj.full <- filter.features(sc.obj.full, cutoff=1e-04,                                 filter.method = 'abundance') ## Features successfully filtered sc.obj.full <- filter.features(sc.obj.full, cutoff=0.05,                                 filter.method='prevalence',                                 feature.type = 'filtered') ## Features successfully filtered check.confounders(sc.obj.full, fn.plot = './confounders_dnk.pdf')"},{"path":"/articles/SIAMCAT_confounder.html","id":"association-testing","dir":"Articles","previous_headings":"","what":"Association Testing","title":"Example dataset with Confoundering","text":"First, can use SIAMCAT test associations including Danish samples. Confounders can lead biases association testing. using SIAMCAT test associations datasets (one time including Danish samples, time restricted samples Spain ), can extract association metrics SIAMCAT objects compare scatter plot.  result shows several species signficant Danish control samples included, considering Spanish samples. example, highlighted species “Dorea formicigenerans” plot . test significant Spanish cohort, highly significant Danish samples included.","code":"sc.obj.full <- check.associations(sc.obj.full, detect.lim = 1e-06, alpha=0.1,                                      max.show = 20,                                     plot.type = 'quantile.rect',                                     fn.plot = './association_plot_dnk.pdf') assoc.sp <- associations(sc.obj) assoc.sp$species <- rownames(assoc.sp) assoc.sp_dnk <- associations(sc.obj.full) assoc.sp_dnk$species <- rownames(assoc.sp_dnk)  df.plot <- full_join(assoc.sp, assoc.sp_dnk, by='species') df.plot %>%     mutate(highlight=str_detect(species, 'formicigenerans')) %>%     ggplot(aes(x=-log10(p.adj.x), y=-log10(p.adj.y), col=highlight)) +     geom_point(alpha=0.3) +         xlab('Spanish samples only\\n-log10(q)') +         ylab('Spanish and Danish samples only\\n-log10(q)') +         theme_classic() +         theme(panel.grid.major = element_line(colour='lightgrey'),             aspect.ratio = 1.3) +         scale_colour_manual(values=c('darkgrey', '#D41645'), guide=FALSE) +         annotate('text', x=0.7, y=8, label='Dorea formicigenerans') # extract information out of the siamcat object feat.dnk <- get.filt_feat.matrix(sc.obj.full) label.dnk <- label(sc.obj.full)$label country <- meta(sc.obj.full)$Country names(country) <- rownames(meta(sc.obj.full))  df.plot <- tibble(dorea=log10(feat.dnk[     str_detect(rownames(feat.dnk),'formicigenerans'),     names(label.dnk)] + 1e-05),     label=label.dnk, country=country) %>%     mutate(label=case_when(label=='-1'~'CTR', TRUE~\"UC\")) %>%     mutate(x_value=paste0(country, '_', label))  df.plot %>%     ggplot(aes(x=x_value, y=dorea)) +         geom_boxplot(outlier.shape = NA) +         geom_jitter(width = 0.08, stroke=0, alpha=0.2) +         theme_classic() +         xlab('') +         ylab(\"log10(Dorea formicigenerans)\") +         stat_compare_means(comparisons = list(c('DNK_CTR', 'ESP_CTR'),                                                 c('DNK_CTR', 'ESP_UC'),                                                 c('ESP_CTR', 'ESP_UC')))"},{"path":"/articles/SIAMCAT_confounder.html","id":"machine-learning","dir":"Articles","previous_headings":"","what":"Machine Learning","title":"Example dataset with Confoundering","text":"results machine learning workflows can also biased differences countries, leading exaggerated performance estimates. compare performance two different models, model Danish Spanish samples included seems perform better (higher AUROC value). However, previous analysis suggests performance estimate biased exaggerated differences Spanish Danish samples can large.  demonstrate machine learning models can exploit confounding factor, can train model distinguish Spanish Danish control samples. can see, model can distinguish two countries almost perfect accuracy.","code":"sc.obj.full <- normalize.features(sc.obj.full, norm.method = 'log.std',                                 norm.param = list(log.n0=1e-06, sd.min.q=0)) ## Features normalized successfully. sc.obj.full <- create.data.split(sc.obj.full, num.folds = 5, num.resample = 5) ## Features splitted for cross-validation successfully. sc.obj.full <- train.model(sc.obj.full, method='lasso') ## Trained lasso models successfully. sc.obj.full <- make.predictions(sc.obj.full) ## Made predictions successfully. sc.obj.full <- evaluate.predictions(sc.obj.full) ## Evaluated predictions successfully. model.evaluation.plot(\"Spanish samples only\"=sc.obj,                     \"Danish and Spanish samples\"=sc.obj.full,                     fn.plot = './eval_plot_dnk.pdf') ## Plotted evaluation of predictions successfully to: ./eval_plot_dnk.pdf meta.nielsen.country <- meta.nielsen[meta.nielsen$Group=='CTR',]  sc.obj.country <- siamcat(feat=feat, meta=meta.nielsen.country,                             label='Country', case='ESP') sc.obj.country <- filter.features(sc.obj.country, cutoff=1e-04,                             filter.method = 'abundance') sc.obj.country <- filter.features(sc.obj.country, cutoff=0.05,                             filter.method='prevalence',                             feature.type = 'filtered') sc.obj.country <- normalize.features(sc.obj.country, norm.method = 'log.std',                                     norm.param = list(log.n0=1e-06,                                         sd.min.q=0)) sc.obj.country <- create.data.split(sc.obj.country,                                      num.folds = 5, num.resample = 5) sc.obj.country <- train.model(sc.obj.country, method='lasso') sc.obj.country <- make.predictions(sc.obj.country) sc.obj.country <- evaluate.predictions(sc.obj.country)  print(eval_data(sc.obj.country)$auroc) ## Area under the curve: 0.9701"},{"path":"/articles/SIAMCAT_confounder.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Example dataset with Confoundering","text":"","code":"sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] ggpubr_0.4.0      SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ##  [5] ParamHelpers_1.14 forcats_0.5.1     stringr_1.4.0     dplyr_1.0.7       ##  [9] purrr_0.3.4       readr_2.0.0       tidyr_1.1.3       tibble_3.1.3      ## [13] ggplot2_3.3.5     tidyverse_1.3.1   BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] readxl_1.3.1        backports_1.2.1     fastmatch_1.1-3     ##   [4] corrplot_0.90       systemfonts_1.0.2   plyr_1.8.6          ##   [7] igraph_1.2.6        splines_4.0.5       gridBase_0.4-7      ##  [10] digest_0.6.27       foreach_1.5.1       htmltools_0.5.1.1   ##  [13] fansi_0.5.0         magrittr_2.0.1      checkmate_2.0.0     ##  [16] memoise_2.0.0       BBmisc_1.11         cluster_2.1.2       ##  [19] tzdb_0.1.2          openxlsx_4.2.4      Biostrings_2.58.0   ##  [22] modelr_0.1.8        matrixStats_0.60.0  vroom_1.5.3         ##  [25] pkgdown_1.6.1.9001  prettyunits_1.1.1   colorspace_2.0-2    ##  [28] rvest_1.0.1         textshaping_0.3.5   haven_2.4.1         ##  [31] xfun_0.24           crayon_1.4.1        jsonlite_1.7.2      ##  [34] survival_3.2-11     iterators_1.0.13    ape_5.5             ##  [37] glue_1.4.2          gtable_0.3.0        zlibbioc_1.36.0     ##  [40] XVector_0.30.0      car_3.0-11          Rhdf5lib_1.12.1     ##  [43] shape_1.4.6         BiocGenerics_0.36.1 abind_1.4-5         ##  [46] scales_1.1.1        infotheo_1.2.0      DBI_1.1.1           ##  [49] rstatix_0.7.0       Rcpp_1.0.7          progress_1.2.2      ##  [52] bit_4.0.4           foreign_0.8-81      stats4_4.0.5        ##  [55] glmnet_4.1-2        httr_1.4.2          RColorBrewer_1.1-2  ##  [58] ellipsis_0.3.2      farver_2.1.0        pkgconfig_2.0.3     ##  [61] sass_0.4.0          dbplyr_2.1.1        utf8_1.2.2          ##  [64] labeling_0.4.2      tidyselect_1.1.1    rlang_0.4.11        ##  [67] reshape2_1.4.4      PRROC_1.3.1         munsell_0.5.0       ##  [70] cellranger_1.1.0    tools_4.0.5         cachem_1.0.5        ##  [73] cli_3.0.1           generics_0.1.0      ade4_1.7-17         ##  [76] broom_0.7.9         evaluate_0.14       biomformat_1.18.0   ##  [79] fastmap_1.1.0       yaml_2.2.1          ragg_1.1.3          ##  [82] bit64_4.0.5         knitr_1.33          fs_1.5.0            ##  [85] zip_2.2.0           beanplot_1.2        nlme_3.1-152        ##  [88] xml2_1.3.2          compiler_4.0.5      rstudioapi_0.13     ##  [91] curl_4.3.2          ggsignif_0.6.2      reprex_2.0.0        ##  [94] bslib_0.2.5.1       stringi_1.7.3       highr_0.9           ##  [97] desc_1.3.0          lattice_0.20-44     Matrix_1.3-4        ## [100] vegan_2.5-7         permute_0.9-5       multtest_2.46.0     ## [103] vctrs_0.3.8         pillar_1.6.1        lifecycle_1.0.0     ## [106] rhdf5filters_1.2.1  BiocManager_1.30.16 jquerylib_0.1.4     ## [109] LiblineaR_2.10-12   data.table_1.14.0   R6_2.5.0            ## [112] bookdown_0.22       gridExtra_2.3       rio_0.5.27          ## [115] IRanges_2.24.1      codetools_0.2-18    MASS_7.3-54         ## [118] assertthat_0.2.1    rhdf5_2.34.0        rprojroot_2.0.2     ## [121] withr_2.4.2         S4Vectors_0.28.1    mgcv_1.8-36         ## [124] parallel_4.0.5      hms_1.1.0           grid_4.0.5          ## [127] rmarkdown_2.9       carData_3.0-4       parallelMap_1.5.1   ## [130] pROC_1.17.0.1       Biobase_2.50.0      lubridate_1.7.10"},{"path":"/articles/SIAMCAT_holdout.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Holdout Testing with SIAMCAT","text":"One functionalities SIAMCAT package training statistical machine learning models metagenomics data. vignette, demonstrate model can built one dataset applied another, similarly processed holdout dataset. might interest comparing data two different studies disease. vignette, look two datasets studies colorectal cancer (CRC). first study Zeller et al. investigated metagenomic markers CRC population France, second study Yu et al. used samples China goal. datasets profiled taxonomic profiling tool, yielding taxonomic identifiers, required holdout testing.","code":""},{"path":"/articles/SIAMCAT_holdout.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the Data","title":"Holdout Testing with SIAMCAT","text":"datasets can found web repository public metagenomics datasets Zeller group. First , build SIAMCAT object using data French study way seen main SIAMCAT vignette. can load data Chinese study similar way also create SIAMCAT object holdout dataset.","code":"library(SIAMCAT)  # this is data from Zeller et al., Mol. Syst. Biol. 2014 fn.feat.fr  <-     'https://www.embl.de/download/zeller/FR-CRC/FR-CRC-N141_tax-ab-specI.tsv' fn.meta.fr  <-     'https://www.embl.de/download/zeller/FR-CRC/FR-CRC-N141_metadata.tsv'  # this is the external dataset from Yu et al., Gut 2017 fn.feat.cn  <-     'https://www.embl.de/download/zeller/CN-CRC/CN-CRC-N128_tax-ab-specI.tsv' fn.meta.cn  <-     'https://www.embl.de/download/zeller/CN-CRC/CN-CRC-N128_metadata.tsv' # features # be vary of the defaults in R!!! feat.fr  <- read.table(fn.feat.fr, sep='\\t', quote=\"\",     check.names = FALSE, stringsAsFactors = FALSE) # the features are counts, but we want to work with relative abundances feat.fr.rel <- prop.table(as.matrix(feat.fr), 2)  # metadata meta.fr  <- read.table(fn.meta.fr, sep='\\t', quote=\"\",     check.names=FALSE, stringsAsFactors=FALSE)  # create SIAMCAT object siamcat.fr <- siamcat(feat=feat.fr.rel, meta=meta.fr,     label='Group', case='CRC') ## + starting create.label ## Label used as case: ##    CRC ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.029 s ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 141 sample(s). ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.028 s # features feat.cn  <- read.table(fn.feat.cn, sep='\\t', quote=\"\",     check.names = FALSE) feat.cn.rel <- prop.table(as.matrix(feat.cn), 2)  # metadata meta.cn  <- read.table(fn.meta.cn, sep='\\t', quote=\"\",     check.names=FALSE, stringsAsFactors = FALSE)  # SIAMCAT object siamcat.cn <- siamcat(feat=feat.cn.rel, meta=meta.cn,         label='Group', case='CRC') ## + starting create.label ## Label used as case: ##    CRC ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.001 s ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 128 sample(s). ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.022 s"},{"path":"/articles/SIAMCAT_holdout.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"Holdout Testing with SIAMCAT","text":"French dataset, perform complete process model building within SIAMCAT, including data preprocessing steps like data validation, filtering, data normalization.","code":"siamcat.fr <- filter.features(     siamcat.fr,     filter.method = 'abundance',     cutoff = 0.001,     rm.unmapped = TRUE,     verbose=2 ) ## + starting filter.features ## +++ before filtering, the data have 1754 features ## +++ removed 1 features corresponding to UNMAPPED reads ## +++ removed 1539 features whose values did not exceed 0.001 in any sample (retaining 215) ## + finished filter.features in 0.005 s siamcat.fr <- normalize.features(     siamcat.fr,     norm.method = \"log.std\",     norm.param = list(log.n0 = 1e-06, sd.min.q = 0.1),     verbose = 2 ) ## + starting normalize.features ## +++ performing de novo normalization using the  log.std  method ## + feature sparsity before normalization: 46.05% ## +++ feature sparsity after normalization:      0 % ## + finished normalize.features in 0.004 s"},{"path":"/articles/SIAMCAT_holdout.html","id":"model-training","dir":"Articles","previous_headings":"","what":"Model Training","title":"Holdout Testing with SIAMCAT","text":"Now, can build statistical model. use parameters main SIAMCAT vignette, process explained detail.","code":"siamcat.fr <-  create.data.split(     siamcat.fr,     num.folds = 5,     num.resample = 2 ) ## Features splitted for cross-validation successfully. siamcat.fr <- train.model(     siamcat.fr,     method = \"lasso\" ) ## Trained lasso models successfully."},{"path":"/articles/SIAMCAT_holdout.html","id":"predictions","dir":"Articles","previous_headings":"","what":"Predictions","title":"Holdout Testing with SIAMCAT","text":"Finally, can make predictions cross-validation fold evaluate predictions seen main SIAMCAT vignette.","code":"siamcat.fr <- make.predictions(siamcat.fr) ## Made predictions successfully. siamcat.fr <-  evaluate.predictions(siamcat.fr) ## Evaluated predictions successfully."},{"path":"/articles/SIAMCAT_holdout.html","id":"application-on-the-holdout-dataset","dir":"Articles","previous_headings":"","what":"Application on the Holdout Dataset","title":"Holdout Testing with SIAMCAT","text":"Now successfully built model French dataset, can apply Chinese holdout dataset. First, normalize Chinese dataset parameters used French dataset order make data comparable. step, can use frozen normalization functionality normalize.features function SIAMCAT. supply function normalization parameters saved siamcat.fr object, can accessed using norm_params accessor.","code":""},{"path":"/articles/SIAMCAT_holdout.html","id":"frozen-normalization","dir":"Articles","previous_headings":"","what":"Frozen Normalization","title":"Holdout Testing with SIAMCAT","text":"","code":"siamcat.cn <- normalize.features(siamcat.cn,     norm.param=norm_params(siamcat.fr),     feature.type='original',     verbose = 2) ## + starting normalize.features ## + normalizing original features ## + performing frozen  log.std  normalization using the supplied parameters ## + feature sparsity before normalization: 49.77% ## + feature sparsity after normalization:     0% ## + finished normalize.features in 0.003 s"},{"path":"/articles/SIAMCAT_holdout.html","id":"holdout-predictions","dir":"Articles","previous_headings":"","what":"Holdout Predictions","title":"Holdout Testing with SIAMCAT","text":"Next, apply trained model predict holdout dataset. Note make.predictions function can also take care normalization holdout dataset. , evaluate predictions:","code":"siamcat.cn <- make.predictions(     siamcat = siamcat.fr,     siamcat.holdout = siamcat.cn,     normalize.holdout = FALSE) ## Warning in make.predictions(siamcat = siamcat.fr, siamcat.holdout = ## siamcat.cn, : WARNING: holdout set is not being normalized! ## Made predictions successfully. ## Alternative Code, not run here siamcat.cn <- siamcat(feat=feat.cn.rel, meta=meta.cn,     label='Group', case='CRC') siamcat.cn <- make.predictions(siamcat = siamcat.fr,     siamcat.holdout = siamcat.cn,     normalize.holdout = TRUE) siamcat.cn <- evaluate.predictions(siamcat.cn)"},{"path":"/articles/SIAMCAT_holdout.html","id":"model-evaluation","dir":"Articles","previous_headings":"","what":"Model Evaluation","title":"Holdout Testing with SIAMCAT","text":"Now, can compare performance classifier original holdout dataset using model.evaluation.plot function. , can supply several SIAMCAT objects model evaluation plotted plot. Note can supply objects named objects order print names legend.","code":"model.evaluation.plot('FR-CRC'=siamcat.fr,     'CN-CRC'=siamcat.cn,     colours=c('dimgrey', 'orange'))"},{"path":"/articles/SIAMCAT_holdout.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Holdout Testing with SIAMCAT","text":"","code":"sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ParamHelpers_1.14 ## [5] BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] nlme_3.1-152        matrixStats_0.60.0  fs_1.5.0            ##   [4] progress_1.2.2      RColorBrewer_1.1-2  PRROC_1.3.1         ##   [7] rprojroot_2.0.2     tools_4.0.5         backports_1.2.1     ##  [10] bslib_0.2.5.1       utf8_1.2.2          R6_2.5.0            ##  [13] vegan_2.5-7         DBI_1.1.1           BiocGenerics_0.36.1 ##  [16] mgcv_1.8-36         colorspace_2.0-2    permute_0.9-5       ##  [19] rhdf5filters_1.2.1  ade4_1.7-17         prettyunits_1.1.1   ##  [22] gridExtra_2.3       tidyselect_1.1.1    compiler_4.0.5      ##  [25] parallelMap_1.5.1   glmnet_4.1-2        textshaping_0.3.5   ##  [28] Biobase_2.50.0      desc_1.3.0          bookdown_0.22       ##  [31] sass_0.4.0          scales_1.1.1        checkmate_2.0.0     ##  [34] pkgdown_1.6.1.9001  systemfonts_1.0.2   stringr_1.4.0       ##  [37] digest_0.6.27       rmarkdown_2.9       XVector_0.30.0      ##  [40] pkgconfig_2.0.3     htmltools_0.5.1.1   fastmap_1.1.0       ##  [43] rlang_0.4.11        BBmisc_1.11         shape_1.4.6         ##  [46] jquerylib_0.1.4     generics_0.1.0      jsonlite_1.7.2      ##  [49] dplyr_1.0.7         magrittr_2.0.1      biomformat_1.18.0   ##  [52] Matrix_1.3-4        Rcpp_1.0.7          munsell_0.5.0       ##  [55] S4Vectors_0.28.1    Rhdf5lib_1.12.1     fansi_0.5.0         ##  [58] ape_5.5             infotheo_1.2.0      lifecycle_1.0.0     ##  [61] pROC_1.17.0.1       stringi_1.7.3       yaml_2.2.1          ##  [64] MASS_7.3-54         zlibbioc_1.36.0     rhdf5_2.34.0        ##  [67] plyr_1.8.6          grid_4.0.5          LiblineaR_2.10-12   ##  [70] parallel_4.0.5      crayon_1.4.1        lattice_0.20-44     ##  [73] Biostrings_2.58.0   splines_4.0.5       multtest_2.46.0     ##  [76] hms_1.1.0           beanplot_1.2        knitr_1.33          ##  [79] pillar_1.6.1        igraph_1.2.6        reshape2_1.4.4      ##  [82] codetools_0.2-18    stats4_4.0.5        fastmatch_1.1-3     ##  [85] XML_3.99-0.6        glue_1.4.2          evaluate_0.14       ##  [88] data.table_1.14.0   BiocManager_1.30.16 vctrs_0.3.8         ##  [91] foreach_1.5.1       gtable_0.3.0        purrr_0.3.4         ##  [94] assertthat_0.2.1    cachem_1.0.5        ggplot2_3.3.5       ##  [97] gridBase_0.4-7      xfun_0.24           ragg_1.1.3          ## [100] survival_3.2-11     tibble_3.1.3        iterators_1.0.13    ## [103] memoise_2.0.0       IRanges_2.24.1      corrplot_0.90       ## [106] cluster_2.1.2       ellipsis_0.3.2"},{"path":"/articles/SIAMCAT_meta.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About This Vignette","title":"Meta-analysis using SIAMCAT","text":"vignette, want demonstrate SIAMCAT can facilitate metagenomic meta-analyses, focussing association testing ML workflows. example, use five different studies Crohn’s disease (CD), since taxonomic profiles five different metagenomic datasets available. studies : metaHIT Lewis et al. 2015 et al. 2017 Franzosa et al. 2019 HMP2","code":""},{"path":"/articles/SIAMCAT_meta.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Meta-analysis using SIAMCAT","text":"First, load data studies, available download EMBL cluster. raw data preprocessed taxonomically profiled mOTUs2 aggregated genus level. Let us look distribution groups across studies studies contain one sample subject. example, HMP2 publication focussed longitudinal aspect CD. Therefore. want take account training evaluating machine learning model (see vignette Machine learning pitfalls) performing association testing. Thus, convenient create second metadata table containing single entry individual.","code":"library(\"tidyverse\") library(\"SIAMCAT\") # base url for data download data.location <- 'https://www.embl.de/download/zeller/' # datasets datasets <- c('metaHIT', 'Lewis_2015', 'He_2017', 'Franzosa_2019', 'HMP2') # metadata meta.all <- read_tsv(paste0(data.location, 'CD_meta/meta_all.tsv')) # features feat <- read.table(paste0(data.location, 'CD_meta/feat_genus.tsv'),                  check.names = FALSE, stringsAsFactors = FALSE, quote = '',                  sep='\\t') feat <- as.matrix(feat) # check that metadata and features agree stopifnot(all(colnames(feat) == meta.all$Sample_ID)) table(meta.all$Study, meta.all$Group) ##                 ##                  CD CTR ##   Franzosa_2019  88  56 ##   He_2017        49  53 ##   HMP2          583 357 ##   Lewis_2015    294  25 ##   metaHIT        21  71 meta.ind <- meta.all %>%      group_by(Individual_ID) %>%      filter(Timepoint==min(Timepoint)) %>%      ungroup()"},{"path":"/articles/SIAMCAT_meta.html","id":"compute-associations-with-siamcat","dir":"Articles","previous_headings":"","what":"Compute Associations with SIAMCAT","title":"Meta-analysis using SIAMCAT","text":"test associations, can encapsulate dataset different SIAMCAT object use check.associations function:","code":"assoc.list <- list() for (d in datasets){     # filter metadata and convert to dataframe     meta.train <- meta.ind %>%          filter(Study==d) %>%          as.data.frame()     rownames(meta.train) <- meta.train$Sample_ID      # create SIAMCAT object     sc.obj <- siamcat(feat=feat, meta=meta.train, label='Group', case='CD')     # test for associations     sc.obj <- check.associations(sc.obj, detect.lim = 1e-05,         feature.type = 'original',fn.plot = paste0('./assoc_plot_', d, '.pdf'))     # extract the associations and save them in the assoc.list     temp <- associations(sc.obj)     temp$genus <- rownames(temp)     assoc.list[[d]] <- temp %>%          select(genus, fc, auc, p.adj) %>%          mutate(Study=d) } # combine all associations df.assoc <- bind_rows(assoc.list) df.assoc <- df.assoc %>% filter(genus!='unclassified') head(df.assoc) ##                                             genus fc auc p.adj   Study ## 159730 Thermovenabulum...1 159730 Thermovenabulum  0 0.5   NaN metaHIT ## 42447 Anaerobranca...2         42447 Anaerobranca  0 0.5   NaN metaHIT ## 1562 Desulfotomaculum...3   1562 Desulfotomaculum  0 0.5   NaN metaHIT ## 60919 Sanguibacter...4         60919 Sanguibacter  0 0.5   NaN metaHIT ## 357 Agrobacterium...5           357 Agrobacterium  0 0.5   NaN metaHIT ## 392332 Geoalkalibacter...6 392332 Geoalkalibacter  0 0.5   NaN metaHIT"},{"path":"/articles/SIAMCAT_meta.html","id":"plot-heatmap-for-interesting-genera","dir":"Articles","previous_headings":"","what":"Plot Heatmap for Interesting Genera","title":"Meta-analysis using SIAMCAT","text":"Now, can compare associations stored df.assoc tibble. example, can extract features strongly associated label (single-feature AUROC > 0.75 < 0.25) least one studies plot generalized fold change heatmap. extracted genera, plot :","code":"genera.of.interest <- df.assoc %>%      group_by(genus) %>%      summarise(m=mean(auc), n.filt=any(auc < 0.25 | auc > 0.75),          .groups='keep') %>%      filter(n.filt) %>%      arrange(m) df.assoc %>%      # take only genera of interest     filter(genus %in% genera.of.interest$genus) %>%      # convert to factor to enforce an ordering by mean AUC     mutate(genus=factor(genus, levels = rev(genera.of.interest$genus))) %>%      # convert to factor to enforce ordering again     mutate(Study=factor(Study, levels = datasets)) %>%      # annotate the cells in the heatmap with stars     mutate(l=case_when(p.adj < 0.01~'*', TRUE~'')) %>%       ggplot(aes(y=genus, x=Study, fill=fc)) +          geom_tile() +          scale_fill_gradient2(low = '#3B6FB6', high='#D41645', mid = 'white',              limits=c(-2.7, 2.7), name='Generalized\\nfold change') +          theme_minimal() +          geom_text(aes(label=l)) +         theme(panel.grid = element_blank()) +          xlab('') + ylab('') +         theme(axis.text = element_text(size=6))"},{"path":"/articles/SIAMCAT_meta.html","id":"study-as-confounding-factor","dir":"Articles","previous_headings":"","what":"Study as Confounding Factor","title":"Meta-analysis using SIAMCAT","text":"Additionally, can check differences studies might influence variance specific genera. , create singel SIAMCAT object holds complete datasets run check.confounder function.  resulting variance plot shows genera strongly impacated differences studies, genera much. note, genera vary label (CD vs controls) show lot variance across studies.","code":"df.meta <- meta.ind %>%      as.data.frame() rownames(df.meta) <- df.meta$Sample_ID sc.obj <- siamcat(feat=feat, meta=df.meta, label='Group', case='CD') ## + starting create.label ## Label used as case: ##    CD ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.001 s ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 504 sample(s). ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.052 s check.confounders(sc.obj, fn.plot = './confounder_plot_cd_meta.pdf',                 feature.type='original') ## Finished checking metadata for confounders, results plotted to: ./confounder_plot_cd_meta.pdf"},{"path":"/articles/SIAMCAT_meta.html","id":"train-lasso-models","dir":"Articles","previous_headings":"","what":"Train LASSO Models","title":"Meta-analysis using SIAMCAT","text":"Lastly, can perform machine learning (ML) meta-analysis: first train one model datasets apply datasets using holdout testing functionality SIAMCAT. datasets repeated samples across subjects, block cross-validation subjects order bias results (see also vignette Machine learning pitfalls). trained applied models, can calculate test average dataset: Now AUROC values, can plot nice heatmap:","code":"# create tibble to store all the predictions auroc.all <- tibble(study.train=character(0),                      study.test=character(0),                     AUC=double(0)) # and a list to save the trained SIAMCAT objects sc.list <- list() for (i in datasets){     # restrict to a single study     meta.train <- meta.all %>%          filter(Study==i) %>%          as.data.frame()     rownames(meta.train) <- meta.train$Sample_ID      ## take into account repeated sampling by including a parameters     ## in the create.data.split function     ## For studies with repeated samples, we want to block the     ## cross validation by the column 'Individual_ID'     block <- NULL     if (i %in% c('metaHIT', 'Lewis_2015', 'HMP2')){         block <- 'Individual_ID'         if (i == 'HMP2'){              # for the HMP2 dataset, the number of repeated sample per subject              # need to be reduced, because some subjects have been sampled              # 20 times, other only 5 times             meta.train <- meta.all %>%                  filter(Study=='HMP2') %>%                  group_by(Individual_ID) %>%                  sample_n(5, replace = TRUE) %>%                  distinct() %>%                  as.data.frame()             rownames(meta.train) <- meta.train$Sample_ID         }     }     # create SIAMCAT object     sc.obj.train <- siamcat(feat=feat, meta=meta.train,                              label='Group', case='CD')     # normalize features     sc.obj.train <- normalize.features(sc.obj.train, norm.method = 'log.std',         norm.param=list(log.n0=1e-05, sd.min.q=0),feature.type = 'original')     # Create data split     sc.obj.train <- create.data.split(sc.obj.train,         num.folds = 10, num.resample = 10, inseparable = block)     # train LASSO model     sc.obj.train <- train.model(sc.obj.train, method='lasso')      ## apply trained models to other datasets      # loop through datasets again     for (i2 in datasets){         if (i == i2){             # make and evaluate cross-validation predictions (same dataset)             sc.obj.train <- make.predictions(sc.obj.train)             sc.obj.train <- evaluate.predictions(sc.obj.train)             auroc.all <- auroc.all %>%                  add_row(study.train=i, study.test=i,                     AUC=eval_data(sc.obj.train)$auroc %>% as.double())         } else {             # make and evaluate on the external datasets             # use meta.ind here, since we want only one sample per subject!             meta.test <- meta.ind %>%                  filter(Study==i2) %>%                 as.data.frame()             rownames(meta.test) <- meta.test$Sample_ID             sc.obj.test <- siamcat(feat=feat, meta=meta.test,                                     label='Group', case='CD')             # make holdout predictions             sc.obj.test <- make.predictions(sc.obj.train,                                              siamcat.holdout = sc.obj.test)             sc.obj.test <- evaluate.predictions(sc.obj.test)             auroc.all <- auroc.all %>%                  add_row(study.train=i, study.test=i2,                     AUC=eval_data(sc.obj.test)$auroc %>% as.double())         }     }     # save the trained model     sc.list[[i]] <- sc.obj.train } test.average <- auroc.all %>%      filter(study.train!=study.test) %>%      group_by(study.test) %>%      summarise(AUC=mean(AUC), .groups='drop') %>%      mutate(study.train=\"Average\") # combine AUROC values with test average bind_rows(auroc.all, test.average) %>%      # highlight cross validation versus transfer results     mutate(CV=study.train == study.test) %>%     # for facetting later     mutate(split=case_when(study.train=='Average'~'Average', TRUE~'none')) %>%      mutate(split=factor(split, levels = c('none', 'Average'))) %>%      # convert to factor to enforce ordering     mutate(study.train=factor(study.train, levels=c(datasets, 'Average'))) %>%      mutate(study.test=factor(study.test, levels=c(rev(datasets),'Average'))) %>%      ggplot(aes(y=study.test, x=study.train, fill=AUC, size=CV, color=CV)) +         geom_tile() + theme_minimal() +         # text in tiles         geom_text(aes_string(label=\"format(AUC, digits=2)\"),              col='white', size=2)+         # color scheme         scale_fill_gradientn(colours=rev(c('darkgreen','forestgreen',                                          'chartreuse3','lawngreen',                                          'yellow')), limits=c(0.5, 1)) +         # axis position/remove boxes/ticks/facet background/etc.         scale_x_discrete(position='top') +          theme(axis.line=element_blank(),                  axis.ticks = element_blank(),                  axis.text.x.top = element_text(angle=45, hjust=.1),                  panel.grid=element_blank(),                  panel.border=element_blank(),                  strip.background = element_blank(),                  strip.text = element_blank()) +          xlab('Training Set') + ylab('Test Set') +          scale_color_manual(values=c('#FFFFFF00', 'grey'), guide=FALSE) +          scale_size_manual(values=c(0, 1), guide=FALSE) +          facet_grid(~split, scales = 'free', space = 'free') ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \"none\"` instead.  ## Warning: It is deprecated to specify `guide = FALSE` to remove a guide. Please ## use `guide = \"none\"` instead."},{"path":"/articles/SIAMCAT_meta.html","id":"investigate-feature-weights","dir":"Articles","previous_headings":"","what":"Investigate Feature Weights","title":"Meta-analysis using SIAMCAT","text":"Now trained models (saved sc.list object), can also extract model weights using SIAMCAT compare associations computed . Using , can plot another heatmap weights, focussing genera interest plotted associations heatmap .","code":"weight.list <- list() for (d in datasets){     sc.obj.train <- sc.list[[d]]     # extract the feature weights out of the SIAMCAT object     temp <- feature_weights(sc.obj.train)     temp$genus <- rownames(temp)     # save selected info in the weight.list     weight.list[[d]] <- temp %>%          select(genus, median.rel.weight, mean.rel.weight, percentage) %>%          mutate(Study=d) %>%          mutate(r.med=rank(-abs(median.rel.weight)),              r.mean=rank(-abs(mean.rel.weight))) } # combine all feature weights into a single tibble df.weights <- bind_rows(weight.list) df.weights <- df.weights %>% filter(genus!='unclassified') # compute absolute feature weights abs.weights <- df.weights %>%      group_by(Study) %>%      summarise(sum.median=sum(abs(median.rel.weight)),                 sum.mean=sum(abs(mean.rel.weight)),                 .groups='drop')  df.weights %>%      full_join(abs.weights) %>%      # normalize by the absolute model size     mutate(median.rel.weight=median.rel.weight/sum.median) %>%      # only include genera of interest     filter(genus %in% genera.of.interest$genus) %>%      # highlight feature rank for the top 20 features     mutate(r.med=case_when(r.med > 20~NA_real_, TRUE~r.med)) %>%     # enforce the correct ordering by converting to factors again     mutate(genus=factor(genus, levels = rev(genera.of.interest$genus))) %>%      mutate(Study=factor(Study, levels = datasets)) %>%      ggplot(aes(y=genus, x=Study, fill=median.rel.weight)) +          geom_tile() +          scale_fill_gradientn(colours=rev(             c('#007A53', '#009F4D', \"#6CC24A\", 'white',             \"#EFC06E\", \"#FFA300\", '#BE5400')),              limits=c(-0.15, 0.15)) +         theme_minimal() +          geom_text(aes(label=r.med), col='black', size= 2) +         theme(panel.grid = element_blank()) +          xlab('') + ylab('') +         theme(axis.text = element_text(size=6)) ## Joining, by = \"Study\""},{"path":"/articles/SIAMCAT_meta.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Meta-analysis using SIAMCAT","text":"","code":"sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ParamHelpers_1.14 ##  [5] forcats_0.5.1     stringr_1.4.0     dplyr_1.0.7       purrr_0.3.4       ##  [9] readr_2.0.0       tidyr_1.1.3       tibble_3.1.3      ggplot2_3.3.5     ## [13] tidyverse_1.3.1   BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] colorspace_2.0-2    ellipsis_0.3.2      rprojroot_2.0.2     ##   [4] XVector_0.30.0      fs_1.5.0            rstudioapi_0.13     ##   [7] farver_2.1.0        bit64_4.0.5         fansi_0.5.0         ##  [10] lubridate_1.7.10    xml2_1.3.2          PRROC_1.3.1         ##  [13] codetools_0.2-18    splines_4.0.5       cachem_1.0.5        ##  [16] knitr_1.33          ade4_1.7-17         jsonlite_1.7.2      ##  [19] pROC_1.17.0.1       gridBase_0.4-7      broom_0.7.9         ##  [22] cluster_2.1.2       dbplyr_2.1.1        BiocManager_1.30.16 ##  [25] compiler_4.0.5      httr_1.4.2          backports_1.2.1     ##  [28] assertthat_0.2.1    Matrix_1.3-4        fastmap_1.1.0       ##  [31] cli_3.0.1           prettyunits_1.1.1   htmltools_0.5.1.1   ##  [34] tools_4.0.5         igraph_1.2.6        gtable_0.3.0        ##  [37] glue_1.4.2          LiblineaR_2.10-12   reshape2_1.4.4      ##  [40] fastmatch_1.1-3     Rcpp_1.0.7          parallelMap_1.5.1   ##  [43] Biobase_2.50.0      cellranger_1.1.0    jquerylib_0.1.4     ##  [46] pkgdown_1.6.1.9001  vctrs_0.3.8         Biostrings_2.58.0   ##  [49] rhdf5filters_1.2.1  multtest_2.46.0     ape_5.5             ##  [52] nlme_3.1-152        iterators_1.0.13    xfun_0.24           ##  [55] rvest_1.0.1         lifecycle_1.0.0     beanplot_1.2        ##  [58] zlibbioc_1.36.0     MASS_7.3-54         scales_1.1.1        ##  [61] vroom_1.5.3         ragg_1.1.3          hms_1.1.0           ##  [64] parallel_4.0.5      biomformat_1.18.0   rhdf5_2.34.0        ##  [67] RColorBrewer_1.1-2  BBmisc_1.11         curl_4.3.2          ##  [70] yaml_2.2.1          gridExtra_2.3       memoise_2.0.0       ##  [73] sass_0.4.0          stringi_1.7.3       highr_0.9           ##  [76] S4Vectors_0.28.1    desc_1.3.0          corrplot_0.90       ##  [79] foreach_1.5.1       permute_0.9-5       checkmate_2.0.0     ##  [82] BiocGenerics_0.36.1 shape_1.4.6         matrixStats_0.60.0  ##  [85] rlang_0.4.11        pkgconfig_2.0.3     systemfonts_1.0.2   ##  [88] evaluate_0.14       lattice_0.20-44     Rhdf5lib_1.12.1     ##  [91] labeling_0.4.2      bit_4.0.4           tidyselect_1.1.1    ##  [94] plyr_1.8.6          magrittr_2.0.1      bookdown_0.22       ##  [97] R6_2.5.0            IRanges_2.24.1      generics_0.1.0      ## [100] DBI_1.1.1           mgcv_1.8-36         pillar_1.6.1        ## [103] haven_2.4.1         withr_2.4.2         survival_3.2-11     ## [106] modelr_0.1.8        crayon_1.4.1        utf8_1.2.2          ## [109] tzdb_0.1.2          rmarkdown_2.9       progress_1.2.2      ## [112] grid_4.0.5          readxl_1.3.1        data.table_1.14.0   ## [115] vegan_2.5-7         infotheo_1.2.0      reprex_2.0.0        ## [118] digest_0.6.27       textshaping_0.3.5   glmnet_4.1-2        ## [121] stats4_4.0.5        munsell_0.5.0       bslib_0.2.5.1"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About This Vignette","title":"Machine learning pitfalls","text":"vignette, want explore two pitfalls machine learning analysis can lead overly optimistic performance estimates. setting cross-validation workflows, main objective usually estimate well trained model perform external data, specifically important considering biomarker discovery. However, complex workflows involving feature selection time-course data can challenging setup correctly. Incorrect workflows information leaks test training data can lead overfitting poor generalization external datasets. , focus supervised feature selection naive splitting dependent data.","code":""},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Machine learning pitfalls","text":"First, load packages needed perform analyses.","code":"library(\"tidyverse\") library(\"SIAMCAT\")"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"supervised-feature-selection","dir":"Articles","previous_headings":"","what":"Supervised Feature Selection","title":"Machine learning pitfalls","text":"Supervised feature selection means label information taken account cross-validation split. Within procedure, features selected associated label (example differential abundance testing), using complete dataset calculation feature association leaving data aside unbiased model evaluation. correct way perform feature selection nest selection step cross-validation procedure. means calculation feature association performed training fold separately.","code":""},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"load-the-data","dir":"Articles","previous_headings":"","what":"Load the Data","title":"Machine learning pitfalls","text":"example, going use two datasets colorectal cancer (CRC) available curatedMetagenomicData package. Since model trainig procedure takes long time, vignette evaluated upon build package, execute code chunks , get similar results. First, going load dataset Thomas et al training dataset. external dataset, going use data Zeller et al.. can also extract corresponding metadata combined_metadata object part curatedMetagenomicData package. MetaPhlAn2 profiler used profiles outputs species present dataset. Therefore, can case species matrix ThomasAM_2018 present matrix ZellerG_2014 vice verse. order use training external test set SIAMCAT, first make sure set features datasets overlap completely (see also Holdout Testing SIAMCAT vignette). Now, ready start model training process. , chose three different feature selection cutoffs prepare tibble hold results:","code":"library(\"curatedMetagenomicData\") x <- 'ThomasAM_2018a.metaphlan_bugs_list.stool' feat.t <- curatedMetagenomicData(x=x, dryrun=FALSE) feat.t <- feat.t[[x]]@assayData$exprs # clean up metaphlan profiles to contain only species-level abundances feat.t <- feat.t[grep(x=rownames(feat.t), pattern='s__'),] feat.t <- feat.t[grep(x=rownames(feat.t),pattern='t__', invert = TRUE),] stopifnot(all(colSums(feat.t) != 0)) feat.t <- t(t(feat.t)/100) x <- 'ZellerG_2014.metaphlan_bugs_list.stool' feat.z <- curatedMetagenomicData(x=x, dryrun=FALSE) feat.z <- feat.z[[x]]@assayData$exprs # clean up metaphlan profiles to contain only species-level abundances feat.z <- feat.z[grep(x=rownames(feat.z), pattern='s__'),] feat.z <- feat.z[grep(x=rownames(feat.z),pattern='t__', invert = TRUE),] stopifnot(all(colSums(feat.z) != 0)) feat.z <- t(t(feat.z)/100) meta.t <- combined_metadata %>%      filter(dataset_name == 'ThomasAM_2018a') %>%      filter(study_condition %in% c('control', 'CRC')) rownames(meta.t) <- meta.t$sampleID meta.z <- combined_metadata %>%      filter(dataset_name == 'ZellerG_2014') %>%      filter(study_condition %in% c('control', 'CRC')) rownames(meta.z) <- meta.z$sampleID species.union <- union(rownames(feat.t), rownames(feat.z)) # add Zeller_2014-only species to the Thomas_2018 matrix add.species <- setdiff(species.union, rownames(feat.t)) feat.t <- rbind(feat.t,              matrix(0, nrow=length(add.species), ncol=ncol(feat.t),                 dimnames = list(add.species, colnames(feat.t))))  # add Thomas_2018-only species to the Zeller_2014 matrix add.species <- setdiff(species.union, rownames(feat.z)) feat.z <- rbind(feat.z,              matrix(0, nrow=length(add.species), ncol=ncol(feat.z),                 dimnames = list(add.species, colnames(feat.z)))) fs.cutoff <- c(20, 100, 250)  auroc.all <- tibble(cutoff=character(0), type=character(0),                      study.test=character(0), AUC=double(0))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"train-model-without-feature-selection","dir":"Articles","previous_headings":"","what":"Train Model without Feature Selection","title":"Machine learning pitfalls","text":"First, train model without feature selection, using available features. add results matrix twice (correct incorrect) easier plotting later. also apply model external dataset record generalization another dataset:","code":"sc.obj.t <- siamcat(feat=feat.t, meta=meta.t,                     label='study_condition', case='CRC') sc.obj.t <- filter.features(sc.obj.t, filter.method = 'prevalence',                             cutoff = 0.01) sc.obj.t <- normalize.features(sc.obj.t, norm.method = 'log.std',                                 norm.param=list(log.n0=1e-05, sd.min.q=0)) sc.obj.t <- create.data.split(sc.obj.t,                                 num.folds = 10, num.resample = 10) sc.obj.t <- train.model(sc.obj.t, method='lasso') sc.obj.t <- make.predictions(sc.obj.t) sc.obj.t <- evaluate.predictions(sc.obj.t)  auroc.all <- auroc.all %>%      add_row(cutoff='full', type='correct',              study.test='Thomas_2018',              AUC=as.numeric(sc.obj.t@eval_data$auroc)) %>%      add_row(cutoff='full', type='incorrect', study.test='Thomas_2018',              AUC=as.numeric(sc.obj.t@eval_data$auroc)) sc.obj.z <- siamcat(feat=feat.z, meta=meta.z,                     label='study_condition', case='CRC') sc.obj.z <- make.predictions(sc.obj.t, sc.obj.z) sc.obj.z <- evaluate.predictions(sc.obj.z) auroc.all <- auroc.all %>%      add_row(cutoff='full', type='correct',              study.test='Zeller_2014',              AUC=as.numeric(sc.obj.z@eval_data$auroc)) %>%      add_row(cutoff='full', type='incorrect',              study.test='Zeller_2014',              AUC=as.numeric(sc.obj.z@eval_data$auroc))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"incorrect-procedure-train-with-supervised-feature-selection","dir":"Articles","previous_headings":"","what":"Incorrect Procedure: Train with Supervised Feature Selection","title":"Machine learning pitfalls","text":"incorrect feature selection procedure, can test features differential abundance, using complete dataset, chose top associated features. Based P values check.association function, now chose X number features train model.","code":"sc.obj.t <- check.associations(sc.obj.t, detect.lim = 1e-05,                                 fn.plot = 'assoc_plot.pdf') mat.assoc <- associations(sc.obj.t) mat.assoc$species <- rownames(mat.assoc) # sort by p-value mat.assoc <- mat.assoc %>% as_tibble() %>% arrange(p.val) for (x in fs.cutoff){     # select x number of features based on p-value ranking     feat.train.red <- feat.t[mat.assoc %>%                                 slice(seq_len(x)) %>%                                 pull(species),]     sc.obj.t.fs <- siamcat(feat=feat.train.red, meta=meta.t,                             label='study_condition', case='CRC')     # normalize the features without filtering     sc.obj.t.fs <- normalize.features(sc.obj.t.fs, norm.method = 'log.std',         norm.param=list(log.n0=1e-05,sd.min.q=0),feature.type = 'original')     # take the same cross validation split as before     data_split(sc.obj.t.fs) <- data_split(sc.obj.t)     # train     sc.obj.t.fs <- train.model(sc.obj.t.fs, method = 'lasso')     # make predictions     sc.obj.t.fs <- make.predictions(sc.obj.t.fs)     # evaluate predictions and record the result     sc.obj.t.fs <- evaluate.predictions(sc.obj.t.fs)     auroc.all <- auroc.all %>%          add_row(cutoff=as.character(x), type='incorrect',                  study.test='Thomas_2018',                 AUC=as.numeric(sc.obj.t.fs@eval_data$auroc))     # apply to the external dataset and record the result     sc.obj.z <- siamcat(feat=feat.z, meta=meta.z,                         label='study_condition', case='CRC')     sc.obj.z <- make.predictions(sc.obj.t.fs, sc.obj.z)     sc.obj.z <- evaluate.predictions(sc.obj.z)     auroc.all <- auroc.all %>%          add_row(cutoff=as.character(x), type='incorrect',                  study.test='Zeller_2014',                  AUC=as.numeric(sc.obj.z@eval_data$auroc)) }"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"correct-procedure-train-with-nested-feature-selection","dir":"Articles","previous_headings":"","what":"Correct Procedure: Train with Nested Feature Selection","title":"Machine learning pitfalls","text":"Feature selection can performed correctly nested within cross-validation procedure. can using SIAMCAT specifying perform.fs parameter train.model function.","code":"for (x in fs.cutoff){     # train using the original SIAMCAT object      # with correct version of feature selection     sc.obj.t.fs <- train.model(sc.obj.t, method = 'lasso', perform.fs = TRUE,         param.fs = list(thres.fs = x,method.fs = \"AUC\",direction='absolute'))     # make predictions     sc.obj.t.fs <- make.predictions(sc.obj.t.fs)     # evaluate predictions and record the result     sc.obj.t.fs <- evaluate.predictions(sc.obj.t.fs)     auroc.all <- auroc.all %>%          add_row(cutoff=as.character(x), type='correct',                  study.test='Thomas_2018',                 AUC=as.numeric(sc.obj.t.fs@eval_data$auroc))     # apply to the external dataset and record the result     sc.obj.z <- siamcat(feat=feat.z, meta=meta.z,                         label='study_condition', case='CRC')     sc.obj.z <- make.predictions(sc.obj.t.fs, sc.obj.z)     sc.obj.z <- evaluate.predictions(sc.obj.z)     auroc.all <- auroc.all %>%          add_row(cutoff=as.character(x), type='correct',                  study.test='Zeller_2014',                  AUC=as.numeric(sc.obj.z@eval_data$auroc)) }"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"plot-the-results","dir":"Articles","previous_headings":"","what":"Plot the Results","title":"Machine learning pitfalls","text":"Now, can plot resulting performance estimates cross-validation external validation well:  can see, incorrect feature selection procedure leads inflated AUROC values lower generalization truly external dataset, especially features selected. contrast, correct procedure gives lower cross-validation results better estimation model perform external data.","code":"auroc.all %>%     # facetting for plotting     mutate(split=case_when(study.test==\"Thomas_2018\"~                             'Cross validation (Thomas 2018)',                         TRUE~\"External validation (Zeller 2014)\")) %>%     # convert to factor to enforce ordering     mutate(cutoff=factor(cutoff, levels = c(fs.cutoff, 'full'))) %>%     ggplot(aes(x=cutoff, y=AUC, col=type)) +         geom_point() + geom_line(aes(group=type)) +         facet_grid(~split) +         scale_y_continuous(limits = c(0.5, 1), expand = c(0,0)) +         xlab('Features selected') +         ylab('AUROC') +         theme_bw() +          scale_colour_manual(values = c('correct'='blue', 'incorrect'='red'),             name='Feature selection procedure') +          theme(panel.grid.minor = element_blank(), legend.position = 'bottom')"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"naive-splitting-of-dependent-data","dir":"Articles","previous_headings":"","what":"Naive Splitting of Dependent Data","title":"Machine learning pitfalls","text":"Another issue machine learning workflows can occur samples independent. example, microbiome samples taken individual different time points usually similar samples individuals. samples split randomly naive cross-validation procedure, case arise samples individual end training test fold. case, model learn generalize across time-points individual compared desired model learn distinguish label across individuals. avoid issue, dependent measurements need blocked cross-validation, ensure samples within block stay fold (training testing).","code":""},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"load-the-data-1","dir":"Articles","previous_headings":"","what":"Load the Data","title":"Machine learning pitfalls","text":"example, going use several datasets Crohn’s disease (CD) available EMBL cluster. data already filtered cleaned. Since model training take quite long time, part vignette evaluated upon building package, able execute . look number samples number individuals, see several samples per individual example HMP2 study. Therefore, going train model HMP2 study. However, number samples per individual varies quite lot across samples, therefore want randomly select set 5 samples per individual:  evaluation, want single sample per individual, therefore can create new matrix removing repeated samples studies: Lastly, can already create tibble hold resulting AUROC values:","code":"data.location <- 'https://www.embl.de/download/zeller/'  # metadata meta.all <- read_tsv(paste0(data.location, 'CD_meta/meta_all.tsv')) ## Rows: 1597 Columns: 6 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: \"\\t\" ## chr (4): Sample_ID, Group, Individual_ID, Study ## dbl (2): Library_Size, Timepoint ##  ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  # features feat.motus <- read.table(paste0(data.location, 'CD_meta/feat_rel_filt.tsv'),                         sep='\\t', stringsAsFactors = FALSE,                         check.names = FALSE) x <- meta.all %>%      group_by(Study, Group) %>%      summarise(n.all=n(), .groups='drop') y <- meta.all %>%      select(Study, Group, Individual_ID) %>%      distinct() %>%      group_by(Study, Group) %>%      summarize(n.indi=n(),  .groups='drop') full_join(x,y) ## Joining, by = c(\"Study\", \"Group\") ## # A tibble: 10 × 4 ##    Study         Group n.all n.indi ##    <chr>         <chr> <int>  <int> ##  1 Franzosa_2019 CD       88     88 ##  2 Franzosa_2019 CTR      56     56 ##  3 He_2017       CD       49     49 ##  4 He_2017       CTR      53     53 ##  5 HMP2          CD      583     50 ##  6 HMP2          CTR     357     26 ##  7 Lewis_2015    CD      294     85 ##  8 Lewis_2015    CTR      25     25 ##  9 metaHIT       CD       21     13 ## 10 metaHIT       CTR      71     59 meta.all %>%      filter(Study=='HMP2') %>%      group_by(Individual_ID) %>%      summarise(n=n(), .groups='drop') %>%      pull(n) %>% hist(20) # sample 5 samples per individual meta.train <- meta.all %>%      filter(Study=='HMP2') %>%      group_by(Individual_ID) %>%     sample_n(5, replace = TRUE) %>%     distinct() %>%     as.data.frame() rownames(meta.train) <- meta.train$Sample_ID meta.ind <- meta.all %>%      group_by(Individual_ID) %>%      filter(Timepoint==min(Timepoint)) %>%      ungroup() auroc.all <- tibble(type=character(0), study.test=character(0), AUC=double(0))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"train-with-naive-cross-validation","dir":"Articles","previous_headings":"","what":"Train with Naive Cross-validation","title":"Machine learning pitfalls","text":"naive way split samples cross-validation take account dependency samples. Therefore, pipeline look basically like :","code":"sc.obj <- siamcat(feat=feat.motus, meta=meta.train,                     label='Group', case='CD') sc.obj <- normalize.features(sc.obj, norm.method = 'log.std',     norm.param=list(log.n0=1e-05,sd.min.q=1),feature.type = 'original') sc.obj.naive <- create.data.split(sc.obj, num.folds = 10, num.resample = 10) sc.obj.naive <- train.model(sc.obj.naive, method='lasso') sc.obj.naive <- make.predictions(sc.obj.naive) sc.obj.naive <- evaluate.predictions(sc.obj.naive) auroc.all <- auroc.all %>%      add_row(type='naive', study.test='HMP2',          AUC=as.numeric(eval_data(sc.obj.naive)$auroc))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"train-with-blocked-cross-validation","dir":"Articles","previous_headings":"","what":"Train with Blocked Cross-validation","title":"Machine learning pitfalls","text":"correct way take account repeated samples block cross-validation procedure individuals. way, samples individual always end fold. can performed SIAMCAT specifying inseparable parameter create.data.split function:","code":"sc.obj.block <- create.data.split(sc.obj, num.folds = 10, num.resample = 10,                                 inseparable = 'Individual_ID') sc.obj.block <- train.model(sc.obj.block, method='lasso') sc.obj.block <- make.predictions(sc.obj.block) sc.obj.block <- evaluate.predictions(sc.obj.block) auroc.all <- auroc.all %>%      add_row(type='blocked', study.test='HMP2',          AUC=as.numeric(eval_data(sc.obj.block)$auroc))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"apply-to-external-datasets","dir":"Articles","previous_headings":"","what":"Apply to External Datasets","title":"Machine learning pitfalls","text":"Now, can apply models external datasets record resulting accuracy:","code":"for (i in setdiff(unique(meta.all$Study), 'HMP2')){     meta.test <- meta.ind %>%          filter(Study==i) %>%          as.data.frame()     rownames(meta.test) <- meta.test$Sample_ID     # apply naive model     sc.obj.test <- siamcat(feat=feat.motus, meta=meta.test,                              label='Group', case='CD')     sc.obj.test <- make.predictions(sc.obj.naive, sc.obj.test)     sc.obj.test <- evaluate.predictions(sc.obj.test)     auroc.all <- auroc.all %>%      add_row(type='naive', study.test=i,             AUC=as.numeric(eval_data(sc.obj.test)$auroc))     # apply blocked model     sc.obj.test <- siamcat(feat=feat.motus, meta=meta.test,                              label='Group', case='CD')     sc.obj.test <- make.predictions(sc.obj.block, sc.obj.test)     sc.obj.test <- evaluate.predictions(sc.obj.test)     auroc.all <- auroc.all %>%          add_row(type='blocked', study.test=i,                 AUC=as.numeric(eval_data(sc.obj.test)$auroc)) }"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"plot-the-results-1","dir":"Articles","previous_headings":"","what":"Plot the Results","title":"Machine learning pitfalls","text":"Now, can compare resulting AUROC values two different approaches:  can see, naive cross-validation procedure leads inflated performance estimation compared blocked cross-validation. However, assessing generalization truly external datasets, blocked procedure results better performance.","code":"auroc.all %>%     # convert to factor to enforce ordering     mutate(type=factor(type, levels = c('naive', 'blocked'))) %>%     # facetting for plotting     mutate(CV=case_when(study.test=='HMP2'~'CV',                          TRUE~'External validation')) %>%     ggplot(aes(x=study.test, y=AUC, fill=type)) +         geom_bar(stat='identity', position = position_dodge(), col='black') +         theme_bw() +         coord_cartesian(ylim=c(0.5, 1)) +         scale_fill_manual(values=c('red', 'blue'), name='') +         facet_grid(~CV, space = 'free', scales = 'free') +         xlab('') + ylab('AUROC') +         theme(legend.position = c(0.8, 0.8))"},{"path":"/articles/SIAMCAT_ml_pitfalls.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"Machine learning pitfalls","text":"","code":"sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ##  [1] SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ParamHelpers_1.14 ##  [5] forcats_0.5.1     stringr_1.4.0     dplyr_1.0.7       purrr_0.3.4       ##  [9] readr_2.0.0       tidyr_1.1.3       tibble_3.1.3      ggplot2_3.3.5     ## [13] tidyverse_1.3.1   BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] colorspace_2.0-2    ellipsis_0.3.2      rprojroot_2.0.2     ##   [4] XVector_0.30.0      fs_1.5.0            rstudioapi_0.13     ##   [7] farver_2.1.0        bit64_4.0.5         fansi_0.5.0         ##  [10] lubridate_1.7.10    xml2_1.3.2          PRROC_1.3.1         ##  [13] codetools_0.2-18    splines_4.0.5       cachem_1.0.5        ##  [16] knitr_1.33          ade4_1.7-17         jsonlite_1.7.2      ##  [19] pROC_1.17.0.1       gridBase_0.4-7      broom_0.7.9         ##  [22] cluster_2.1.2       dbplyr_2.1.1        BiocManager_1.30.16 ##  [25] compiler_4.0.5      httr_1.4.2          backports_1.2.1     ##  [28] assertthat_0.2.1    Matrix_1.3-4        fastmap_1.1.0       ##  [31] cli_3.0.1           prettyunits_1.1.1   htmltools_0.5.1.1   ##  [34] tools_4.0.5         igraph_1.2.6        gtable_0.3.0        ##  [37] glue_1.4.2          LiblineaR_2.10-12   reshape2_1.4.4      ##  [40] fastmatch_1.1-3     Rcpp_1.0.7          parallelMap_1.5.1   ##  [43] Biobase_2.50.0      cellranger_1.1.0    jquerylib_0.1.4     ##  [46] pkgdown_1.6.1.9001  vctrs_0.3.8         Biostrings_2.58.0   ##  [49] rhdf5filters_1.2.1  multtest_2.46.0     ape_5.5             ##  [52] nlme_3.1-152        iterators_1.0.13    xfun_0.24           ##  [55] rvest_1.0.1         lifecycle_1.0.0     beanplot_1.2        ##  [58] zlibbioc_1.36.0     MASS_7.3-54         scales_1.1.1        ##  [61] vroom_1.5.3         ragg_1.1.3          hms_1.1.0           ##  [64] parallel_4.0.5      biomformat_1.18.0   rhdf5_2.34.0        ##  [67] RColorBrewer_1.1-2  BBmisc_1.11         curl_4.3.2          ##  [70] yaml_2.2.1          gridExtra_2.3       memoise_2.0.0       ##  [73] sass_0.4.0          stringi_1.7.3       highr_0.9           ##  [76] S4Vectors_0.28.1    desc_1.3.0          corrplot_0.90       ##  [79] foreach_1.5.1       permute_0.9-5       checkmate_2.0.0     ##  [82] BiocGenerics_0.36.1 shape_1.4.6         matrixStats_0.60.0  ##  [85] rlang_0.4.11        pkgconfig_2.0.3     systemfonts_1.0.2   ##  [88] evaluate_0.14       lattice_0.20-44     Rhdf5lib_1.12.1     ##  [91] labeling_0.4.2      bit_4.0.4           tidyselect_1.1.1    ##  [94] plyr_1.8.6          magrittr_2.0.1      bookdown_0.22       ##  [97] R6_2.5.0            IRanges_2.24.1      generics_0.1.0      ## [100] DBI_1.1.1           mgcv_1.8-36         pillar_1.6.1        ## [103] haven_2.4.1         withr_2.4.2         survival_3.2-11     ## [106] modelr_0.1.8        crayon_1.4.1        utf8_1.2.2          ## [109] tzdb_0.1.2          rmarkdown_2.9       progress_1.2.2      ## [112] grid_4.0.5          readxl_1.3.1        data.table_1.14.0   ## [115] vegan_2.5-7         infotheo_1.2.0      reprex_2.0.0        ## [118] digest_0.6.27       textshaping_0.3.5   glmnet_4.1-2        ## [121] stats4_4.0.5        munsell_0.5.0       bslib_0.2.5.1"},{"path":"/articles/SIAMCAT_read-in.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SIAMCAT input files formats","text":"vignette illustrates read input data SIAMCAT package. cover reading text files disk, formatting using create object siamcat-class. siamcat-class centerpiece package. input data result stored inside . structure object described siamcat-class object section.","code":""},{"path":"/articles/SIAMCAT_read-in.html","id":"siamcat-input","dir":"Articles","previous_headings":"","what":"SIAMCAT input","title":"SIAMCAT input files formats","text":"Generally, three types input SIAMCAT:","code":""},{"path":"/articles/SIAMCAT_read-in.html","id":"features","dir":"Articles","previous_headings":"SIAMCAT input","what":"Features","title":"SIAMCAT input files formats","text":"features matrix, data.frame, otu_table, organized follows: features (rows) x samples (columns). Please note SIAMCAT supposed work relative abundances. types data (e.g. counts) also work, functions package result meaningful outputs. example typical feature file attached SIAMCAT package, containing data publication investigating microbiome colorectal cancer (CRC) patients controls (study can found : Zeller et al). metagenomics data processed MOCAT pipeline, returning taxonomic profiles species levels (specI): One way load data R use read.table (Beware defaults R! always useful…)","code":"library(SIAMCAT) fn.in.feat  <- system.file(     \"extdata\",     \"feat_crc_zeller_msb_mocat_specI.tsv\",     package = \"SIAMCAT\" ) feat <- read.table(fn.in.feat, sep='\\t',     header=TRUE, quote='',     stringsAsFactors = FALSE, check.names = FALSE) # look at some features feat[110:114, 1:2] ##                                CCIS27304052ST-3-0 CCIS15794887ST-4-0 ## Bacteroides caccae [h:1096]          1.557937e-03       1.761949e-03 ## Bacteroides eggerthii [h:1097]       2.734527e-05       4.146882e-05 ## Bacteroides stercoris [h:1098]       1.173786e-03       2.475838e-03 ## Bacteroides clarus [h:1099]          4.830533e-04       4.589747e-06 ## Methanohalophilus mahii [h:11]       0.000000e+00       0.000000e+00"},{"path":"/articles/SIAMCAT_read-in.html","id":"metadata","dir":"Articles","previous_headings":"SIAMCAT input","what":"Metadata","title":"SIAMCAT input files formats","text":"metadata either matrix data.frame. samples (rows) x metadata (columns): rownames metadata match colnames feature matrix. , example file attached SIAMCAT package, taken study: Also , read.table can used load data R.","code":"fn.in.meta  <- system.file(     \"extdata\",     \"num_metadata_crc_zeller_msb_mocat_specI.tsv\",     package = \"SIAMCAT\" ) meta <- read.table(fn.in.meta, sep='\\t',     header=TRUE, quote='',     stringsAsFactors = FALSE, check.names = FALSE) head(meta) ##                    age gender bmi diagnosis localization crc_stage fobt ## CCIS27304052ST-3-0  52      1  20         0           NA         0    0 ## CCIS15794887ST-4-0  37      1  18         0           NA         0    0 ## CCIS74726977ST-3-0  66      2  24         1           NA         0    0 ## CCIS16561622ST-4-0  54      2  26         0           NA         0    0 ## CCIS79210440ST-3-0  65      2  30         0           NA         0    1 ## CCIS82507866ST-3-0  57      2  24         0           NA         0    0 ##                    wif_test ## CCIS27304052ST-3-0        0 ## CCIS15794887ST-4-0        0 ## CCIS74726977ST-3-0       NA ## CCIS16561622ST-4-0        0 ## CCIS79210440ST-3-0        0 ## CCIS82507866ST-3-0        0"},{"path":"/articles/SIAMCAT_read-in.html","id":"label","dir":"Articles","previous_headings":"SIAMCAT input","what":"Label","title":"SIAMCAT input files formats","text":"Finally, label can come different three different flavours: Named vector: named vector containing information cases controls. names vector match rownames metadata colnames feature data. label can contain either information cases controls either integers (e.g. 0 1), characters (e.g. CTR IBD), factors. Metadata column: can provide name column metadata creation label. See example. Label file: SIAMCAT function called read.label, create label object label file. file organized follows: first line supposed read: #BINARY:1=[label cases];-1=[label controls] second row contain sample identifiers tab-separated list (consistent feature metadata). third row supposed contain actual class labels (tab-separated): 1 case -1 control. example file attached package , want look . example dataset, can create label object metadata column called diagnosis: later plot results, might nicer names different groups stored label object (instead 1 0). can also supply create.label function: Note: label information dataset, can still create SIAMCAT object features alone. SIAMCAT object without label information contain TEST label can used making holdout predictions. functions, e.g. model training, work object.","code":"label <- create.label(meta=meta, label=\"diagnosis\",     case = 1, control=0) label <- create.label(meta=meta, label=\"diagnosis\",     case = 1, control=0,     p.lab = 'cancer', n.lab = 'healthy') ## Label used as case: ##    1 ## Label used as control: ##    0 ## + finished create.label.from.metadata in 0.001 s label$info ## healthy  cancer  ##      -1       1"},{"path":"/articles/SIAMCAT_read-in.html","id":"lefse-format-files","dir":"Articles","previous_headings":"","what":"LEfSe format files","title":"SIAMCAT input files formats","text":"LEfSe tool identification associations micriobial features two metadata. LEfSe uses LDA (linear discriminant analysis). LEfSe input file .tsv file. first rows contain metadata. following row contains sample names rest rows occupied features. first column holds row names: example file attached SIAMCAT package: SIAMCAT dedicated function read LEfSe format files. read.lefse function read input file extract metadata features: can create label object one columns meta object create siamcat object:","code":"fn.in.lefse<- system.file(     \"extdata\",     \"LEfSe_crc_zeller_msb_mocat_specI.tsv\",     package = \"SIAMCAT\" ) meta.and.features <- read.lefse(fn.in.lefse,     rows.meta = 1:6, row.samples = 7) meta <- meta.and.features$meta feat <- meta.and.features$feat label <- create.label(meta=meta, label=\"label\", case = \"cancer\") ## Label used as case: ##    cancer ## Label used as control: ##    healthy ## + finished create.label.from.metadata in 0.029 s"},{"path":"/articles/SIAMCAT_read-in.html","id":"metagenomeseq-format-files","dir":"Articles","previous_headings":"","what":"metagenomeSeq format files","title":"SIAMCAT input files formats","text":"metagenomeSeq R package determine differentially abundant features multiple samples. two ways input data metagenomeSeq: two files, one metadata one features - can used SIAMCAT just like described SIAMCAT input read.table: BIOM format file, can used SIAMCAT described following section","code":"fn.in.feat  <- system.file(     \"extdata\",     \"CHK_NAME.otus.count.csv\",     package = \"metagenomeSeq\" ) feat <- read.table(fn.in.feat, sep='\\t',     header=TRUE, quote='', row.names = 1,     stringsAsFactors = FALSE, check.names = FALSE )"},{"path":"/articles/SIAMCAT_read-in.html","id":"biom-format-files","dir":"Articles","previous_headings":"","what":"BIOM format files","title":"SIAMCAT input files formats","text":"BIOM format files can added SIAMCAT via phyloseq. First file imported using phyloseq function import_biom. phyloseq object can imported siamcat object descibed next section.","code":""},{"path":"/articles/SIAMCAT_read-in.html","id":"creating-a-siamcat-object-of-a-phyloseq-object","dir":"Articles","previous_headings":"","what":"Creating a siamcat object of a phyloseq object","title":"SIAMCAT input files formats","text":"siamcat object extends phyloseq object. Therefore, creating siamcat object phyloseq object really straightforward. can done siamcat constructor function. First, however, need create label object:","code":"data(\"GlobalPatterns\") ## phyloseq example data label <- create.label(meta=sample_data(GlobalPatterns),     label = \"SampleType\",     case = c(\"Freshwater\", \"Freshwater (creek)\", \"Ocean\")) ## Label used as case: ##    Freshwater,Freshwater (creek),Ocean ## Label used as control: ##    rest ## + finished create.label.from.metadata in 0.004 s # run the constructor function siamcat <- siamcat(phyloseq=GlobalPatterns, label=label) ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 26 sample(s). ## +++ checking sample number per class ## Data set has a limited number of training examples: ##  rest    18  ##  Case    8  ## Note that a dataset this small/skewed is not necessarily suitable for analysis in this pipeline. ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.398 s"},{"path":"/articles/SIAMCAT_read-in.html","id":"creating-a-siamcat-class-object","dir":"Articles","previous_headings":"","what":"Creating a siamcat-class object","title":"SIAMCAT input files formats","text":"siamcat-class centerpiece package. stored inside object: figure , rectangles depict slots object class object stored slot given ovals. two obligatory slots -phyloseq (containing metadata sample_data original features otu_table) label - marked thick borders. siamcat object constructed using siamcat() function. two ways initialize : Features: can provide feature matrix, data.frame, otu_table function (together label metadata information): phyloseq: alternative create siamcat object directly phyloseq object: Please note provide either feat phyloseq provide . order explain siamcat object better show slots filled.","code":"siamcat <- siamcat(feat=feat, label=label, meta=meta) siamcat <- siamcat(phyloseq=phyloseq, label=label)"},{"path":"/articles/SIAMCAT_read-in.html","id":"phyloseq-label-and-orig_feat-slots","dir":"Articles","previous_headings":"","what":"phyloseq, label and orig_feat slots","title":"SIAMCAT input files formats","text":"phyloseq label slots obligatory. otu_table slot phyloseq -see help('otu_table-class')- stores original feature table. SIAMCAT, slot can accessed orig_feat. label slot contains list. list specific set entries -see help('label-class')- automatically generated read.label create.label functions. phyloseq, label orig_feat filled siamcat object first created constructor function.","code":""},{"path":"/articles/SIAMCAT_read-in.html","id":"all-the-other-slots","dir":"Articles","previous_headings":"","what":"All the other slots","title":"SIAMCAT input files formats","text":"slots filled run SIAMCAT workflow:","code":""},{"path":"/articles/SIAMCAT_read-in.html","id":"accessing-and-assigning-slots","dir":"Articles","previous_headings":"","what":"Accessing and assigning slots","title":"SIAMCAT input files formats","text":"slot siamcat can accessed typing e.g. eval_data slot can types one notable exception: phyloseq slot accessed physeq(siamcat) due technical reasons. Slots filled SIAMCAT workflow package’s functions. However, reason slot needs assigned outside workflow, following formula can used: e.g. assign new_label object label slot: Please note may lead unforeseen consequences…","code":"slot_name(siamcat) eval_data(siamcat) slot_name(siamcat) <- object_to_assign label(siamcat) <- new_label"},{"path":"/articles/SIAMCAT_read-in.html","id":"slots-inside-the-slots","dir":"Articles","previous_headings":"","what":"Slots inside the slots","title":"SIAMCAT input files formats","text":"two slots slots inside . First, model_list slot models slot contains actual list mlr models -can accessed via models(siamcat)- model.type character name method used train model: model_type(siamcat). phyloseq slot complex structure. However, unless phyloseq object created outside SIAMCAT workflow, two slots phyloseq slot occupied: otu_table slot containing features table sam_data slot containing metadata information. can accessed typing either features(siamcat) meta(siamcat). Additional slots inside phyloseq slots dedicated accessors, can easily reached phyloseq object exported siamcat object: want find phyloseq data structure, head phyloseq BioConductor page. # Session Info","code":"phyloseq <- physeq(siamcat) tax_tab <- tax_table(phyloseq) head(tax_tab) ## Taxonomy Table:     [6 taxa by 7 taxonomic ranks]: ##        Kingdom   Phylum          Class          Order          Family          ## 549322 \"Archaea\" \"Crenarchaeota\" \"Thermoprotei\" NA             NA              ## 522457 \"Archaea\" \"Crenarchaeota\" \"Thermoprotei\" NA             NA              ## 951    \"Archaea\" \"Crenarchaeota\" \"Thermoprotei\" \"Sulfolobales\" \"Sulfolobaceae\" ## 244423 \"Archaea\" \"Crenarchaeota\" \"Sd-NA\"        NA             NA              ## 586076 \"Archaea\" \"Crenarchaeota\" \"Sd-NA\"        NA             NA              ## 246140 \"Archaea\" \"Crenarchaeota\" \"Sd-NA\"        NA             NA              ##        Genus        Species                    ## 549322 NA           NA                         ## 522457 NA           NA                         ## 951    \"Sulfolobus\" \"Sulfolobusacidocaldarius\" ## 244423 NA           NA                         ## 586076 NA           NA                         ## 246140 NA           NA sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ParamHelpers_1.14 ## [5] BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] nlme_3.1-152        matrixStats_0.60.0  fs_1.5.0            ##   [4] progress_1.2.2      RColorBrewer_1.1-2  PRROC_1.3.1         ##   [7] rprojroot_2.0.2     tools_4.0.5         backports_1.2.1     ##  [10] bslib_0.2.5.1       utf8_1.2.2          R6_2.5.0            ##  [13] vegan_2.5-7         DBI_1.1.1           BiocGenerics_0.36.1 ##  [16] mgcv_1.8-36         colorspace_2.0-2    permute_0.9-5       ##  [19] rhdf5filters_1.2.1  ade4_1.7-17         prettyunits_1.1.1   ##  [22] gridExtra_2.3       tidyselect_1.1.1    compiler_4.0.5      ##  [25] parallelMap_1.5.1   glmnet_4.1-2        textshaping_0.3.5   ##  [28] Biobase_2.50.0      desc_1.3.0          bookdown_0.22       ##  [31] sass_0.4.0          scales_1.1.1        checkmate_2.0.0     ##  [34] pkgdown_1.6.1.9001  systemfonts_1.0.2   stringr_1.4.0       ##  [37] digest_0.6.27       rmarkdown_2.9       XVector_0.30.0      ##  [40] pkgconfig_2.0.3     htmltools_0.5.1.1   fastmap_1.1.0       ##  [43] rlang_0.4.11        BBmisc_1.11         shape_1.4.6         ##  [46] jquerylib_0.1.4     generics_0.1.0      jsonlite_1.7.2      ##  [49] dplyr_1.0.7         magrittr_2.0.1      biomformat_1.18.0   ##  [52] Matrix_1.3-4        Rcpp_1.0.7          munsell_0.5.0       ##  [55] S4Vectors_0.28.1    Rhdf5lib_1.12.1     fansi_0.5.0         ##  [58] ape_5.5             infotheo_1.2.0      lifecycle_1.0.0     ##  [61] pROC_1.17.0.1       stringi_1.7.3       yaml_2.2.1          ##  [64] MASS_7.3-54         zlibbioc_1.36.0     rhdf5_2.34.0        ##  [67] plyr_1.8.6          grid_4.0.5          LiblineaR_2.10-12   ##  [70] parallel_4.0.5      crayon_1.4.1        lattice_0.20-44     ##  [73] Biostrings_2.58.0   splines_4.0.5       multtest_2.46.0     ##  [76] hms_1.1.0           beanplot_1.2        knitr_1.33          ##  [79] pillar_1.6.1        igraph_1.2.6        reshape2_1.4.4      ##  [82] codetools_0.2-18    stats4_4.0.5        fastmatch_1.1-3     ##  [85] glue_1.4.2          evaluate_0.14       data.table_1.14.0   ##  [88] BiocManager_1.30.16 vctrs_0.3.8         foreach_1.5.1       ##  [91] gtable_0.3.0        purrr_0.3.4         assertthat_0.2.1    ##  [94] cachem_1.0.5        ggplot2_3.3.5       gridBase_0.4-7      ##  [97] xfun_0.24           ragg_1.1.3          survival_3.2-11     ## [100] tibble_3.1.3        iterators_1.0.13    memoise_2.0.0       ## [103] IRanges_2.24.1      corrplot_0.90       cluster_2.1.2       ## [106] ellipsis_0.3.2"},{"path":"/articles/SIAMCAT_vignette.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"About This Vignette","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"vignette aims short tutorial main functionalities SIAMCAT. Examples additional workflows detailed tutorials can found vignettes (see BioConductor page). SIAMCAT part suite computational microbiome analysis tools hosted EMBL groups Peer Bork Georg Zeller. Find EMBL-microbiome tools.","code":""},{"path":"/articles/SIAMCAT_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"Associations microbiome host phenotypes ideally described quantitative models able predict host status microbiome composition. SIAMCAT can data hundreds thousands microbial taxa, gene families, metabolic pathways hundreds samples. SIAMCAT produces graphical output convenient assessment quality input data statistical associations, model diagnostics inference revealing predictive microbial biomarkers.","code":""},{"path":"/articles/SIAMCAT_vignette.html","id":"quick-start","dir":"Articles","previous_headings":"","what":"Quick Start","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"vignette, use example dataset included SIAMCAT package. example dataset use data publication Zeller et al, demonstrated potential microbial species fecal samples distinguish patients colorectal cancer (CRC) healthy controls. First, SIAMCAT needs feature matrix (can either matrix, data.frame, phyloseq-otu_table), contains values different features (rows) different samples (columns). example, feature matrix included contains relative abundances bacterial species calculated mOTU profiler 141 samples: Please note SIAMCAT supposed work relative abundances. types data (e.g. counts) also work, functions package result meaningful outputs. Secondly, also metadata samples another data.frame: order tell SIAMCAT, samples cancer cases healthy controls, can construct label object Group column metadata. Now ingredients create SIAMCAT object. Please look vignette input formats information supported formats ways create SIAMCAT object. information SIAMCAT object can accessed show function phyloseq (SIAMCAT builds phyloseq data structure): Since quite lot microbial species dataset moment, can perform unsupervised feature selection using function filter.features.","code":"library(\"SIAMCAT\")  data(\"feat_crc_zeller\", package=\"SIAMCAT\") data(\"meta_crc_zeller\", package=\"SIAMCAT\") feat.crc.zeller[1:3, 1:3] ##                                  CCIS27304052ST-3-0 CCIS15794887ST-4-0 ## UNMAPPED                                   0.589839          0.7142157 ## Methanoculleus marisnigri [h:1]            0.000000          0.0000000 ## Methanococcoides burtonii [h:10]           0.000000          0.0000000 ##                                  CCIS74726977ST-3-0 ## UNMAPPED                                  0.7818674 ## Methanoculleus marisnigri [h:1]           0.0000000 ## Methanococcoides burtonii [h:10]          0.0000000 dim(feat.crc.zeller) ## [1] 1754  141 head(meta.crc.zeller) ##                    Age BMI Gender AJCC_stage     FOBT Group ## CCIS27304052ST-3-0  52  20      F         -1 Negative   CTR ## CCIS15794887ST-4-0  37  18      F         -1 Negative   CTR ## CCIS74726977ST-3-0  66  24      M         -1 Negative   CTR ## CCIS16561622ST-4-0  54  26      M         -1 Negative   CTR ## CCIS79210440ST-3-0  65  30      M         -1 Positive   CTR ## CCIS82507866ST-3-0  57  24      M         -1 Negative   CTR label.crc.zeller <- create.label(meta=meta.crc.zeller,     label='Group', case='CRC') ## Label used as case: ##    CRC ## Label used as control: ##    CTR ## + finished create.label.from.metadata in 0.002 s sc.obj <- siamcat(feat=feat.crc.zeller,     label=label.crc.zeller,     meta=meta.crc.zeller) ## + starting validate.data ## +++ checking overlap between labels and features ## + Keeping labels of 141 sample(s). ## +++ checking sample number per class ## +++ checking overlap between samples and metadata ## + finished validate.data in 0.049 s show(sc.obj) ## siamcat-class object ## label()                Label object:         88 CTR and 53 CRC samples ##  ## contains phyloseq-class experiment-level object @phyloseq: ## phyloseq@otu_table()   OTU Table:            [ 1754 taxa and 141 samples ] ## phyloseq@sam_data()    Sample Data:          [ 141 samples by 6 sample variables ] sc.obj <- filter.features(sc.obj,     filter.method = 'abundance',     cutoff = 0.001) ## Features successfully filtered"},{"path":"/articles/SIAMCAT_vignette.html","id":"association-testing","dir":"Articles","previous_headings":"","what":"Association Testing","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"Associations microbial species label can tested check.associations function. function computes species significance using non-parametric Wilcoxon test different effect sizes association (e.g. AUC fold change). function produces pdf file output, since plot optimized landscape DIN-A4 layout, can also used plot active graphic device, e.g. RStudio. resulting plot looks like :","code":"sc.obj <- check.associations(     sc.obj,     sort.by = 'fc',     alpha = 0.05,     mult.corr = \"fdr\",     detect.lim = 10 ^-6,     plot.type = \"quantile.box\",     panels = c(\"fc\", \"prevalence\", \"auroc\"))"},{"path":"/articles/SIAMCAT_vignette.html","id":"confounder-testing","dir":"Articles","previous_headings":"","what":"Confounder Testing","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"many biological technical factors beyond primary phenotype interest can influence microbiome composition, simple association studies may suffer confounding variables, can lead spurious results. check.confounders function provides option test associated metadata variables potential confounding influence. information stored SIAMCAT object, different analyses visualized saved combined pdf file qualitative interpretation. conditional entropy check primarily serves remove nonsensical variables subsequent checks. Conditional entropy quantifies unique information contained one variable (row) respective another (column). Identical variables derived variables share exact information value zero. example, label derived Group variable determined AJCC stage, excluded. Conditional Entropy Plot better quantify potential confounding effects metadata variables individual microbial features, check.confounder plots variance explained label comparison variance explained metadata variable individual feature. Variables many features upper left corner might confounding label associations. Variance Explained Plot","code":"sc.obj <- check.confounders(     sc.obj,     fn.plot = 'confounder_plots.pdf',     meta.in = NULL,     feature.type = 'filtered' )"},{"path":"/articles/SIAMCAT_vignette.html","id":"model-building","dir":"Articles","previous_headings":"","what":"Model Building","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"One strength SIAMCAT versatile easy--use interface construction machine learning models basis microbial species. SIAMCAT contains functions data normalization, splitting data cross-validation folds, training model, making predictions based cross-validation instances trained models.","code":""},{"path":"/articles/SIAMCAT_vignette.html","id":"data-normalization","dir":"Articles","previous_headings":"","what":"Data Normalization","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"Data normalization performed normalize.features function. , use log.unit method, several methods customization options available (please check documentation).","code":"sc.obj <- normalize.features(     sc.obj,     norm.method = \"log.unit\",     norm.param = list(         log.n0 = 1e-06,         n.p = 2,         norm.margin = 1     ) ) ## Features normalized successfully."},{"path":"/articles/SIAMCAT_vignette.html","id":"prepare-cross-validation","dir":"Articles","previous_headings":"","what":"Prepare Cross-Validation","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"Preparation cross-validation fold crucial step machine learning. SIAMCAT greatly simplifies set-cross-validation schemes, including stratification samples keeping samples inseperable based metadata. small example, choose twice-repeated 5-fold cross-validation scheme. data-split saved data_split slot SIAMCAT object.","code":"sc.obj <-  create.data.split(     sc.obj,     num.folds = 5,     num.resample = 2 ) ## Features splitted for cross-validation successfully."},{"path":"/articles/SIAMCAT_vignette.html","id":"model-training","dir":"Articles","previous_headings":"","what":"Model Training","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"actual model training performed using function train.model. , multiple options customization available, ranging machine learning method measure model selection customizable parameter set hyperparameter tuning. models saved model_list slot SIAMCAT object. model building performed using mlr R package. models can easily accessed.","code":"sc.obj <- train.model(     sc.obj,     method = \"lasso\" ) # get information about the model type model_type(sc.obj) ## [1] \"lasso\" # access the models models <- models(sc.obj) models[[1]] ## Model for learner.id=classif.cvglmnet; learner.class=classif.cvglmnet ## Trained on: task.id = data; obs = 112; features = 207 ## Hyperparameters: nlambda=100,alpha=1"},{"path":"/articles/SIAMCAT_vignette.html","id":"make-predictions","dir":"Articles","previous_headings":"","what":"Make Predictions","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"Using data-split models trained previous step, can use function make.predictions order apply models test instances data-split. predictions saved pred_matrix slot SIAMCAT object.","code":"sc.obj <- make.predictions(sc.obj) pred_matrix <- pred_matrix(sc.obj) head(pred_matrix) ##                      CV_rep1    CV_rep2 ## CCIS27304052ST-3-0 0.1663144 0.06417251 ## CCIS15794887ST-4-0 0.3254852 0.11169708 ## CCIS74726977ST-3-0 0.4340118 0.44527105 ## CCIS16561622ST-4-0 0.1833164 0.08172675 ## CCIS79210440ST-3-0 0.1421415 0.09371120 ## CCIS82507866ST-3-0 0.1008765 0.08051504"},{"path":"/articles/SIAMCAT_vignette.html","id":"model-evaluation-and-interpretation","dir":"Articles","previous_headings":"","what":"Model Evaluation and Interpretation","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"final part, want find well model performed microbial species selected model. order , first calculate well predictions fit real data using function evaluate.predictions. function calculates Area Receiver Operating Characteristic (ROC) Curve (AU-ROC) Precision Recall (PR) Curve resampled cross-validation run.","code":"sc.obj <-  evaluate.predictions(sc.obj) ## Evaluated predictions successfully."},{"path":"/articles/SIAMCAT_vignette.html","id":"evaluation-plot","dir":"Articles","previous_headings":"","what":"Evaluation Plot","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"plot results evaluation, can use function model.evaluation.plot, produces pdf-file showing ROC PR Curves different resamples runs well mean ROC PR Curve.","code":"model.evaluation.plot(sc.obj)"},{"path":"/articles/SIAMCAT_vignette.html","id":"interpretation-plot","dir":"Articles","previous_headings":"","what":"Interpretation Plot","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"final plot produced SIAMCAT model interpretation plot, created model.interpretation.plot function. plot shows top selected features model weights (robust ) barplot, heatmap z-scores fold changes top selected features, boxplot showing proportions weight per model captured top selected features. Additionally, distribution metadata shown heatmap . function produces pdf-file optimized landscape DIN-A4 plotting region. resulting plot looks like :","code":"model.interpretation.plot(     sc.obj,     fn.plot = 'interpretation.pdf',     consens.thres = 0.5,     limits = c(-3, 3),     heatmap.type = 'zscore', )"},{"path":"/articles/SIAMCAT_vignette.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session Info","title":"SIAMCAT: Statistical Inference of Associations between Microbial Communities And host phenoTypes","text":"","code":"sessionInfo() ## R version 4.0.5 (2021-03-31) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Big Sur 10.16 ##  ## Matrix products: default ## BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] SIAMCAT_1.13.3    phyloseq_1.34.0   mlr_2.19.0        ParamHelpers_1.14 ## [5] BiocStyle_2.18.1  ##  ## loaded via a namespace (and not attached): ##   [1] nlme_3.1-152        matrixStats_0.60.0  fs_1.5.0            ##   [4] progress_1.2.2      RColorBrewer_1.1-2  PRROC_1.3.1         ##   [7] rprojroot_2.0.2     tools_4.0.5         backports_1.2.1     ##  [10] bslib_0.2.5.1       utf8_1.2.2          R6_2.5.0            ##  [13] vegan_2.5-7         DBI_1.1.1           BiocGenerics_0.36.1 ##  [16] mgcv_1.8-36         colorspace_2.0-2    permute_0.9-5       ##  [19] rhdf5filters_1.2.1  ade4_1.7-17         prettyunits_1.1.1   ##  [22] gridExtra_2.3       tidyselect_1.1.1    compiler_4.0.5      ##  [25] parallelMap_1.5.1   glmnet_4.1-2        textshaping_0.3.5   ##  [28] Biobase_2.50.0      desc_1.3.0          bookdown_0.22       ##  [31] sass_0.4.0          scales_1.1.1        checkmate_2.0.0     ##  [34] pkgdown_1.6.1.9001  systemfonts_1.0.2   stringr_1.4.0       ##  [37] digest_0.6.27       rmarkdown_2.9       XVector_0.30.0      ##  [40] pkgconfig_2.0.3     htmltools_0.5.1.1   fastmap_1.1.0       ##  [43] rlang_0.4.11        BBmisc_1.11         shape_1.4.6         ##  [46] jquerylib_0.1.4     generics_0.1.0      jsonlite_1.7.2      ##  [49] dplyr_1.0.7         magrittr_2.0.1      biomformat_1.18.0   ##  [52] Matrix_1.3-4        Rcpp_1.0.7          munsell_0.5.0       ##  [55] S4Vectors_0.28.1    Rhdf5lib_1.12.1     fansi_0.5.0         ##  [58] ape_5.5             infotheo_1.2.0      lifecycle_1.0.0     ##  [61] pROC_1.17.0.1       stringi_1.7.3       yaml_2.2.1          ##  [64] MASS_7.3-54         zlibbioc_1.36.0     rhdf5_2.34.0        ##  [67] plyr_1.8.6          grid_4.0.5          LiblineaR_2.10-12   ##  [70] parallel_4.0.5      crayon_1.4.1        lattice_0.20-44     ##  [73] Biostrings_2.58.0   splines_4.0.5       multtest_2.46.0     ##  [76] hms_1.1.0           beanplot_1.2        knitr_1.33          ##  [79] pillar_1.6.1        igraph_1.2.6        reshape2_1.4.4      ##  [82] codetools_0.2-18    stats4_4.0.5        fastmatch_1.1-3     ##  [85] XML_3.99-0.6        glue_1.4.2          evaluate_0.14       ##  [88] data.table_1.14.0   BiocManager_1.30.16 vctrs_0.3.8         ##  [91] foreach_1.5.1       gtable_0.3.0        purrr_0.3.4         ##  [94] assertthat_0.2.1    cachem_1.0.5        ggplot2_3.3.5       ##  [97] gridBase_0.4-7      xfun_0.24           ragg_1.1.3          ## [100] survival_3.2-11     tibble_3.1.3        iterators_1.0.13    ## [103] memoise_2.0.0       IRanges_2.24.1      corrplot_0.90       ## [106] cluster_2.1.2       ellipsis_0.3.2"},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"SIAMCAT pipeline Statistical Inference Associations Microbial Communities host phenoTypes. primary goal analyzing microbiome data determine changes community composition associated environmental factors. particular, linking human microbiome composition host phenotypes diseases become area intense research. , robust statistical modeling biomarker extraction toolkits crucially needed. SIAMCAT provides full pipeline supporting data preprocessing, statistical association testing, statistical modeling (LASSO logistic regression) including tools evaluation interpretation models (cross validation, parameter selection, ROC analysis diagnostic model plots).  SIAMCAT developed Zeller group part suite computational microbiome analysis tools hosted EMBL.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"Starting with SIAMCAT","what":"Installation","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"order start SIAMCAT, need install Bioconductor: Alternatively, can install current development version via devtools:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE))     install.packages(\"BiocManager\") BiocManager::install(\"SIAMCAT\") require(\"devtools\") devtools::install_github(repo = 'zellerlab/siamcat')"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"Starting with SIAMCAT","what":"Quick start","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"manuals kick-start help analyse data SIAMCAT. can find links Bioconductor website SIAMCAT can type R:","code":"browseVignettes(\"SIAMCAT\") # Please Note: # `browseVignettes` only works if `SIAMCAT` has been installed via Bioconductor"},{"path":"/index.html","id":"feedback-and-contact","dir":"","previous_headings":"","what":"Feedback and Contact","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"question SIAMCAT, run issue, like make feature request, please: - create issue repository - mail Georg Zeller - ask SIAMCAT support group general question (useful several users), please hesitate post dedicated forums Stackoverflow Biostars. let us know question, answer swiftly. Please consider giving us feedback. (feedback useful us justify funding get developing maintaining package.)","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"SIAMCAT distributed GPL-3 license.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"use SIAMCAT, please cite us using Wirbel J, Zych K, Essex M, Karcher N, Kartal E, Salazar G, Bork P, Sunagawa S, Zeller G Microbiome meta-analysis cross-disease comparison enabled SIAMCAT machine learning toolbox Genome Biol 22, 93 (2021) https://doi.org/10.1186/s13059-021-02306-1 publication, analyzed large set case-control microbiome datasets. metadata taxonomic profiles studies available Zenodo repository: .","code":"citation(\"SIAMCAT\")"},{"path":"/index.html","id":"examples-of-primary-package-output","dir":"","previous_headings":"","what":"Examples of primary package output","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"give small preview primary package output, example plots taking main SIAMCAT vignette. vignette, use example dataset also included SIAMCAT package. dataset taken publication Zeller et al, demonstrated potential microbial species fecal samples distinguish patients colorectal cancer (CRC) healthy controls.","code":""},{"path":"/index.html","id":"association-testing","dir":"","previous_headings":"Examples of primary package output","what":"Association testing","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"result check.associations function association plot. significantly associated microbial features, plot shows: - abundances features across two different classes (CRC vs. controls) - significance enrichment calculated Wilcoxon test (multiple hypothesis testing correction) - generalized fold change feature - prevalence shift two classes, - Area Receiver Operating Characteristics Curve (AU-ROC) non-parametric effect size measure. Association testing","code":""},{"path":"/index.html","id":"model-interpretation-plot","dir":"","previous_headings":"Examples of primary package output","what":"Model interpretation plot","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"statistical models trained distinguish cancer cases controls, models can investigated function model.interpretation.plot. plots shows: - median relative feature weight selected features (barplot left) - robustness features (.e. many models specific feature selected) - distribution selected features across samples (central heatmap) - proportion weight different models shown plot (boxplot right), - distribution metadata across samples (heatmap ). Model interpretation plot","code":""},{"path":"/index.html","id":"where-siamcat-has-been-used-already","dir":"","previous_headings":"","what":"Where SIAMCAT has been used already","title":"Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes","text":"Several publications already used SIAMCAT (previous versions thereof). Potential fecal microbiota early-stage detection colorectal cancerZeller G, Tap J, Voigt AY, Sunagawa S, Kultima JR, Costea PI, Amiot , Böhm J, Brunetti F, Habermann N, Hercog R, Koch M, Luciani , Mende DR, Schneider MA, Schrotz-King P, Tournigand C, Tran Van Nhieu J, Yamada T, Zimmermann J, Benes V, Kloor M, Ulrich CM, von Knebel Doeberitz M, Sobhani , Bork P Molecular Systems Biology, (2014) 10, 766 >Original Publication inspired SIAMCAT Gut Microbiota Linked Sexual Preference HIV InfectionNoguera-Julian M, Rocafort M, Guillén Y, Rivera J, Casadellà M, Nowak P, Hildebrand F, Zeller G, Parera M, Bellido R, Rodríguez C,Carrillo J, Mothe B, Coll J, Bravo , Estany C, Herrero C, Saz J, Sirera G, Torrela , Navarro J, Crespo M, Brander C, Negredo E, Blanco J, Guarner F, Calle ML, Bork P, Sönnerborgd , Clotet B, Paredes R EBioMedicine 5 (2016) 135-146 >See Figure 5 Extensive transmission microbes along gastrointestinal tractSchmidt TSB, Hayward MR, Coelho LP, Li SS, Costea PI, Voigt AY, Wirbel J, Maistrenko OM, Alves RJC, Bergsten E, de Beaufort C, Sobhani , Heintz-Buschart , Sunagawa S, Zeller G, Wilmes P, Bork P eLife, (2019) 8:e42693 > See Figure 3 - figure supplement 1 Meta-analysis fecal metagenomes reveals global microbial signatures specific colorectal cancerWirbel J, Pyl PT, Kartal E, Zych K, Kashani , Milanese , Fleck JS, Voigt AY, Palleja , Ponnudurai R, Sunagawa S, Coelho LP, Schrotz-King P, Vogtmann E, Habermann N, Niméus E, Thomas , Manghi P, Gandini S, Serrano D, Mizutani S, Shiroma H, Shiba S, Shibata T, Yachida S, Yamada T, Waldron L, Naccarati , Segata N, Sinha R, Ulrich CM, Brenner H, Arumugam M, Bork P, Zeller G Nature Medicine, (2019) [Epub ahead print] > publication, SIAMCAT used extensively holdout testing used SIAMCAT publication, let us know!","code":""},{"path":"/reference/SIAMCAT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"SIAMCAT: Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes — SIAMCAT-package","title":"SIAMCAT: Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes — SIAMCAT-package","text":"Pipeline Statistical Inference Associations     Microbial Communities host phenoTypes (SIAMCAT). primary goal     analyzing microbiome data determine changes community     composition associated environmental factors. particular,     linking human microbiome composition host phenotypes diseases     become area intense research. , robust statistical     modeling biomarker extraction toolkits crucially needed. SIAMCAT     provides full pipeline supporting data preprocessing, statistical     association testing, statistical modeling (LASSO logistic regression)     including tools evaluation interpretation models (    cross validation, parameter selection, ROC analysis diagnostic     model plots).","code":""},{"path":"/reference/SIAMCAT-package.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"SIAMCAT: Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes — SIAMCAT-package","text":"SIAMCAT pipeline Statistical Inference Associations Microbial Communities host phenoTypes. primary goal analyzing microbiome data determine changes community composition associated environmental factors. particular, linking human microbiome composition host phenotypes diseases become area intense research. , robust statistical modeling biomarker extraction toolkits crucially needed!","code":""},{"path":"/reference/SIAMCAT-package.html","id":"section-author","dir":"Reference","previous_headings":"","what":"Author","title":"SIAMCAT: Statistical Inference of Associations between Microbial\n    Communities And host phenoTypes — SIAMCAT-package","text":"Maintainer: Jakob Wirbel jakob.wirbel@embl.de (ORCID) Authors: Konrad Zych konrad.zych@embl.de (ORCID) Georg Zeller zeller@embl.de (ORCID) contributors: Morgan Essex morgan.essex@embl.de [contributor] Nicolai Karcher [contributor] Kersten Breuer [contributor]","code":""},{"path":"/reference/accessSlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Universal slot accessor function for siamcat-class. — accessSlot","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"function used internally many accessors.","code":""},{"path":"/reference/accessSlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"","code":"accessSlot(siamcat, slot, verbose=1)"},{"path":"/reference/accessSlot.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"siamcat object siamcat-class.","code":""},{"path":"/reference/accessSlot.html","id":"pkg-arg-slot","dir":"Reference","previous_headings":"","what":"slot (argument)","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"slot character string indicating slot (data class) component data type desired.","code":""},{"path":"/reference/accessSlot.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"verbose slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/accessSlot.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Universal slot accessor function for siamcat-class. — accessSlot","text":"Returns component object specified argument slot.     Returns NULL slot exist.","code":""},{"path":"/reference/add.meta.pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Add metadata as predictors — add.meta.pred","title":"Add metadata as predictors — add.meta.pred","text":"function adds metadata feature matrix later     used predictors","code":""},{"path":"/reference/add.meta.pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add metadata as predictors — add.meta.pred","text":"","code":"add.meta.pred(siamcat, pred.names,     std.meta = TRUE,     feature.type='normalized',     verbose = 1)"},{"path":"/reference/add.meta.pred.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Add metadata as predictors — add.meta.pred","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/add.meta.pred.html","id":"pkg-arg-pred.names","dir":"Reference","previous_headings":"","what":"pred.names (argument)","title":"Add metadata as predictors — add.meta.pred","text":"pred.names vector names variables within metadata added feature matrix predictors","code":""},{"path":"/reference/add.meta.pred.html","id":"pkg-arg-std.meta","dir":"Reference","previous_headings":"","what":"std.meta (argument)","title":"Add metadata as predictors — add.meta.pred","text":"std.meta boolean, added metadata features standardized?, defaults TRUE","code":""},{"path":"/reference/add.meta.pred.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Add metadata as predictors — add.meta.pred","text":"feature.type string, type features function work? Can either \"original\", \"filtered\", \"normalized\". Please change paramter know !","code":""},{"path":"/reference/add.meta.pred.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Add metadata as predictors — add.meta.pred","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/add.meta.pred.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Add metadata as predictors — add.meta.pred","text":"object class siamcat-class metadata added     features","code":""},{"path":"/reference/add.meta.pred.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Add metadata as predictors — add.meta.pred","text":"functions adds one several metadata variables set features, can included model training. Usually, function called train.model. Numerical meta-variables added z-scores feature matrix unless specified otherwise. Please aware, non-numerical metadata variables converted numerical values using .numeric() therefore lead errors. Thus, makes sense encode non-numerical metadata variables numerically start SIAMCAT workflow.","code":""},{"path":"/reference/assign-associations.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new assocications object to x — associations<-","title":"Assign a new assocications object to x — associations<-","text":"Assign new assocications object x","code":""},{"path":"/reference/assign-associations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new assocications object to x — associations<-","text":"","code":"associations(x) <- value  # S4 method for siamcat,list associations(x) <- value"},{"path":"/reference/assign-associations.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new assocications object to x — associations<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-associations.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new assocications object to x — associations<-","text":"value associations object","code":""},{"path":"/reference/assign-associations.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new assocications object to x — associations<-","text":"none","code":""},{"path":"/reference/assign-data_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","title":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","text":"Assign new list containing cross-validation split SIAMCAT object","code":""},{"path":"/reference/assign-data_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","text":"","code":"data_split(x) <- value  # S4 method for siamcat,list data_split(x) <- value"},{"path":"/reference/assign-data_split.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-data_split.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","text":"value list containing cross-validation split","code":""},{"path":"/reference/assign-data_split.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new list containing a cross-validation split to a\nSIAMCAT object — data_split<-","text":"none","code":""},{"path":"/reference/assign-eval_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","title":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","text":"Assign new list evaluation data SIAMCAT object","code":""},{"path":"/reference/assign-eval_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","text":"","code":"eval_data(x) <- value  # S4 method for siamcat,list eval_data(x) <- value"},{"path":"/reference/assign-eval_data.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-eval_data.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","text":"value list evaluation data","code":""},{"path":"/reference/assign-eval_data.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new list with evaluation data to a SIAMCAT object — eval_data<-","text":"none","code":""},{"path":"/reference/assign-filt_feat.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new filt_feat object to x — filt_feat<-","title":"Assign a new filt_feat object to x — filt_feat<-","text":"Assign new filt_feat object x","code":""},{"path":"/reference/assign-filt_feat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new filt_feat object to x — filt_feat<-","text":"","code":"filt_feat(x) <- value  # S4 method for siamcat,list filt_feat(x) <- value"},{"path":"/reference/assign-filt_feat.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new filt_feat object to x — filt_feat<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-filt_feat.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new filt_feat object to x — filt_feat<-","text":"value filt_feat object","code":""},{"path":"/reference/assign-filt_feat.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new filt_feat object to x — filt_feat<-","text":"none","code":""},{"path":"/reference/assign-label.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new label object to a SIAMCAT object — label<-","title":"Assign a new label object to a SIAMCAT object — label<-","text":"Assign new label object SIAMCAT object","code":""},{"path":"/reference/assign-label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new label object to a SIAMCAT object — label<-","text":"","code":"label(x) <- value  # S4 method for siamcat,list label(x) <- value"},{"path":"/reference/assign-label.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new label object to a SIAMCAT object — label<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-label.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new label object to a SIAMCAT object — label<-","text":"value list (label format)","code":""},{"path":"/reference/assign-label.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new label object to a SIAMCAT object — label<-","text":"none","code":""},{"path":"/reference/assign-meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new sam_data object to x — meta<-","title":"Assign a new sam_data object to x — meta<-","text":"Assign new sam_data object x","code":""},{"path":"/reference/assign-meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new sam_data object to x — meta<-","text":"","code":"meta(x) <- value  # S4 method for siamcat,sample_data meta(x) <- value"},{"path":"/reference/assign-meta.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new sam_data object to x — meta<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-meta.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new sam_data object to x — meta<-","text":"value object class sample_data-class","code":""},{"path":"/reference/assign-meta.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new sam_data object to x — meta<-","text":"none","code":""},{"path":"/reference/assign-model_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","title":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","text":"Assign new list containing trained models SIAMCAT object","code":""},{"path":"/reference/assign-model_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","text":"","code":"model_list(x) <- value  # S4 method for siamcat,list model_list(x) <- value"},{"path":"/reference/assign-model_list.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-model_list.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","text":"value list containing trained models, type models features","code":""},{"path":"/reference/assign-model_list.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new list containing trained models to a SIAMCAT object — model_list<-","text":"none","code":""},{"path":"/reference/assign-norm_feat.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","title":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","text":"Assign new list containing normalziation parameters normalized features SIAMCAT object","code":""},{"path":"/reference/assign-norm_feat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","text":"","code":"norm_feat(x) <- value  # S4 method for siamcat,list norm_feat(x) <- value"},{"path":"/reference/assign-norm_feat.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-norm_feat.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","text":"value list containing normaliation parameters features","code":""},{"path":"/reference/assign-norm_feat.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new list containing normalziation parameters and normalized\nfeatures to a SIAMCAT object — norm_feat<-","text":"none","code":""},{"path":"/reference/assign-orig_feat.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","title":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","text":"Assign new otu_table object x orig_feat slot","code":""},{"path":"/reference/assign-orig_feat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","text":"","code":"orig_feat(x) <- value  # S4 method for siamcat,otu_table orig_feat(x) <- value"},{"path":"/reference/assign-orig_feat.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-orig_feat.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","text":"value object class otu_table-class","code":""},{"path":"/reference/assign-orig_feat.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new otu_table object to x orig_feat slot — orig_feat<-","text":"none","code":""},{"path":"/reference/assign-physeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new phyloseq object to x — physeq<-","title":"Assign a new phyloseq object to x — physeq<-","text":"Assign new phyloseq object x","code":""},{"path":"/reference/assign-physeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new phyloseq object to x — physeq<-","text":"","code":"physeq(x) <- value  # S4 method for siamcat,phyloseq physeq(x) <- value"},{"path":"/reference/assign-physeq.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new phyloseq object to x — physeq<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-physeq.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new phyloseq object to x — physeq<-","text":"value object class phyloseq-class","code":""},{"path":"/reference/assign-physeq.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new phyloseq object to x — physeq<-","text":"none","code":""},{"path":"/reference/assign-pred_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","title":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","text":"Assign new matrix predictions SIAMCAT object","code":""},{"path":"/reference/assign-pred_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","text":"","code":"pred_matrix(x) <- value  # S4 method for siamcat,matrix pred_matrix(x) <- value"},{"path":"/reference/assign-pred_matrix.html","id":"pkg-arg-x","dir":"Reference","previous_headings":"","what":"x (argument)","title":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","text":"x object class siamcat-class","code":""},{"path":"/reference/assign-pred_matrix.html","id":"pkg-arg-value","dir":"Reference","previous_headings":"","what":"value (argument)","title":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","text":"value matrix containing predictions","code":""},{"path":"/reference/assign-pred_matrix.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a new matrix with predictions to a SIAMCAT object — pred_matrix<-","text":"none","code":""},{"path":"/reference/assoc_param-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"Function retrieve list parameters association testing","code":""},{"path":"/reference/assoc_param-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"","code":"assoc_param(siamcat, verbose=1)  # S4 method for siamcat assoc_param(siamcat, verbose = 1)"},{"path":"/reference/assoc_param-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"siamcat (Required). instance siamcat-class containing results association testing","code":""},{"path":"/reference/assoc_param-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/assoc_param-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"list parameters association testing NULL","code":""},{"path":"/reference/assoc_param-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the list of parameters for association testing from\na SIAMCAT object — assoc_param","text":"function returns list parameters used association testing. See check.associations details.","code":""},{"path":"/reference/associations-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the results of association testing from a SIAMCAT object — associations","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"Function retrieve results association testing","code":""},{"path":"/reference/associations-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"","code":"associations(siamcat, verbose=1)  # S4 method for siamcat associations(siamcat, verbose = 1)"},{"path":"/reference/associations-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"siamcat (Required). instance siamcat-class containing results association testing","code":""},{"path":"/reference/associations-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/associations-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"data.frame association testing results NULL","code":""},{"path":"/reference/associations-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the results of association testing from a SIAMCAT object — associations","text":"function returns results association testing procedure dataframe. See check.associations details.","code":""},{"path":"/reference/check.associations.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and visualize associations between features and classes — check.associations","title":"Check and visualize associations between features and classes — check.associations","text":"function computes different measures association     features label visualizes results","code":""},{"path":"/reference/check.associations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and visualize associations between features and classes — check.associations","text":"","code":"check.associations(siamcat, fn.plot=NULL, color.scheme = \"RdYlBu\",     alpha =0.05, mult.corr = \"fdr\", sort.by = \"fc\",     detect.lim = 1e-06, pr.cutoff = 1e-6, max.show = 50,     plot.type = \"quantile.box\",     panels = c(\"fc\",\"auroc\"), prompt = TRUE,     feature.type = 'filtered', paired=NULL, verbose = 1)"},{"path":"/reference/check.associations.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-fn.plot","dir":"Reference","previous_headings":"","what":"fn.plot (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"fn.plot string, filename pdf-plot. fn.plot NULL, plot produced active graphics device.","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-color.scheme","dir":"Reference","previous_headings":"","what":"color.scheme (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"color.scheme valid R color scheme vector valid R colors (must length number classes), defaults 'RdYlBu'","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-alpha","dir":"Reference","previous_headings":"","what":"alpha (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"alpha float, significance level, defaults 0.05","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-mult.corr","dir":"Reference","previous_headings":"","what":"mult.corr (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"mult.corr string, multiple hypothesis correction method, see p.adjust, defaults \"fdr\"","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-sort.by","dir":"Reference","previous_headings":"","what":"sort.by (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"sort.string, sort features p-value (\"p.val\"), fold change (\"fc\") prevalence shift (\"pr.shift\"), defaults \"fc\"","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-detect.lim","dir":"Reference","previous_headings":"","what":"detect.lim (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"detect.lim float, pseudocount added log-transformation data, defaults 1e-06. ignored feature.type \"normalized\".","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-pr.cutoff","dir":"Reference","previous_headings":"","what":"pr.cutoff (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"pr.cutoff float, cutoff prevalence computation, defaults 1e-06","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-max.show","dir":"Reference","previous_headings":"","what":"max.show (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"max.show integer, many associated features shown, defaults 50","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-plot.type","dir":"Reference","previous_headings":"","what":"plot.type (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"plot.type string, specify abundance plotted, must one : c(\"bean\", \"box\", \"quantile.box\", \"quantile.rect\"), defaults \"quantile.box\"","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-panels","dir":"Reference","previous_headings":"","what":"panels (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"panels vector, name panels plotted next abundances, possible entries c(\"fc\", \"auroc\", \"prevalence\"), defaults c(\"fc\", \"auroc\")","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-prompt","dir":"Reference","previous_headings":"","what":"prompt (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"prompt boolean, turn /prompting user input plotting pdf-file, defaults TRUE","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"feature.type string, type features function work? Can either c()\"original\", \"filtered\", \"normalized\"). Please change paramter know ! feature.type \"normalized\", normalized abundances log10-transformed.","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-paired","dir":"Reference","previous_headings":"","what":"paired (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"paired character, column name meta-variable containing  information paired test","code":""},{"path":"/reference/check.associations.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Check and visualize associations between features and classes — check.associations","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/check.associations.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and visualize associations between features and classes — check.associations","text":"object class siamcat-class slot     associations filled","code":""},{"path":"/reference/check.associations.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and visualize associations between features and classes — check.associations","text":"feature, function calculates different measures     association feature label. detail,     associations : Significance computed Wilcoxon test followed multiple     hypothesis testing correction. AUROC (Area Receiver Operating Characteristics Curve)     non-parameteric measure enrichment (corresponds effect     size Wilcoxon test). generalized Fold Change (gFC) pseudo fold change     calculated geometric mean differences     quantiles different classes found label. prevalence shift two different classes found     label. Finally, function produces plot top max.show     associated features user-specified significance level alpha,     showing distribution log10-transformed abundances     classes, user-selected panels effect (AU-ROC, Prevalence     Shift, Fold Change).","code":""},{"path":"/reference/check.confounders.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for potential confounders in the metadata — check.confounders","title":"Check for potential confounders in the metadata — check.confounders","text":"Checks potential confounders metadata produces     visualizations","code":""},{"path":"/reference/check.confounders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for potential confounders in the metadata — check.confounders","text":"","code":"check.confounders(siamcat, fn.plot, meta.in = NULL, feature.type='filtered', verbose = 1)"},{"path":"/reference/check.confounders.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Check for potential confounders in the metadata — check.confounders","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/check.confounders.html","id":"pkg-arg-fn.plot","dir":"Reference","previous_headings":"","what":"fn.plot (argument)","title":"Check for potential confounders in the metadata — check.confounders","text":"fn.plot string, filename pdf-plot","code":""},{"path":"/reference/check.confounders.html","id":"pkg-arg-meta.in","dir":"Reference","previous_headings":"","what":"meta.in (argument)","title":"Check for potential confounders in the metadata — check.confounders","text":"meta.vector, specific metadata variable names analyze, defaults NULL (metadata variables analyzed)","code":""},{"path":"/reference/check.confounders.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Check for potential confounders in the metadata — check.confounders","text":"feature.type string, type features function work? Can either c()\"original\", \"filtered\", \"normalized\"). Please change paramter know !","code":""},{"path":"/reference/check.confounders.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Check for potential confounders in the metadata — check.confounders","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/check.confounders.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for potential confounders in the metadata — check.confounders","text":"return anything, outputs plots specified pdf file","code":""},{"path":"/reference/check.confounders.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for potential confounders in the metadata — check.confounders","text":"function checks associations class labels     potential confounders (e.g. Age, Sex, BMI) present     metadata. Statistical testing performed Fisher's exact test     Wilcoxon test, associations visualized either barplot     Q-Q plot, depending type metadata. Additionally, evaluates associations among metadata variables using     conditional entropy associations label using generalized     linear models, producing correlation heatmap appropriate     quantitative barplots, respectively.","code":""},{"path":"/reference/create.data.split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a dataset into training and a test sets. — create.data.split","title":"Split a dataset into training and a test sets. — create.data.split","text":"function prepares cross-validation splitting     data num.folds training test folds     num.resample times.","code":""},{"path":"/reference/create.data.split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a dataset into training and a test sets. — create.data.split","text":"","code":"create.data.split(siamcat, num.folds = 2, num.resample = 1,     stratify = TRUE, inseparable = NULL, verbose = 1)"},{"path":"/reference/create.data.split.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/create.data.split.html","id":"pkg-arg-num.folds","dir":"Reference","previous_headings":"","what":"num.folds (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"num.folds integer number cross-validation folds (needs >=2), defaults 2","code":""},{"path":"/reference/create.data.split.html","id":"pkg-arg-num.resample","dir":"Reference","previous_headings":"","what":"num.resample (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"num.resample integer, resampling rounds (values <= 1 deactivate resampling), defaults 1","code":""},{"path":"/reference/create.data.split.html","id":"pkg-arg-stratify","dir":"Reference","previous_headings":"","what":"stratify (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"stratify boolean, splits stratified equal proportion classes present fold?, defaults TRUE","code":""},{"path":"/reference/create.data.split.html","id":"pkg-arg-inseparable","dir":"Reference","previous_headings":"","what":"inseparable (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"inseparable string, name metadata variable inseparable, defaults NULL, see Details ","code":""},{"path":"/reference/create.data.split.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Split a dataset into training and a test sets. — create.data.split","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/create.data.split.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Split a dataset into training and a test sets. — create.data.split","text":"object class siamcat-class data_split-slot     filled","code":""},{"path":"/reference/create.data.split.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Split a dataset into training and a test sets. — create.data.split","text":"function splits labels within siamcat-class object     prepares internal cross-validation model training (see     train.model). function saves training test instances different     cross-validation folds within list data_split-slot     siamcat-class object, list four entries: num.folds - number cross-validation folds num.resample - number repetitions     cross-validation training.folds - list containing indices     training instances test.folds - list containing indices     test instances provided, data split take account metadata variable     data split (providing inseparable argument).     example, data contains several samples individual,     make sense keep data individual within     fold.     inseparable given, stratify argument     ignored.","code":""},{"path":"/reference/create.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a label list — create.label","title":"Create a label list — create.label","text":"function creates label object metadata atomic vector","code":""},{"path":"/reference/create.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a label list — create.label","text":"","code":"create.label(label, case,     meta=NULL, control=NULL,     p.lab = NULL, n.lab = NULL,     remove.meta.column=FALSE,     verbose=1)"},{"path":"/reference/create.label.html","id":"pkg-arg-label","dir":"Reference","previous_headings":"","what":"label (argument)","title":"Create a label list — create.label","text":"label named vector create label name metadata column used create label","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-case","dir":"Reference","previous_headings":"","what":"case (argument)","title":"Create a label list — create.label","text":"case name group used positive label. variable binary, label used negative one. variable multiple values, values used negative label (testing one vs rest).","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-meta","dir":"Reference","previous_headings":"","what":"meta (argument)","title":"Create a label list — create.label","text":"meta metadata dataframe object object class sample_data-class","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-control","dir":"Reference","previous_headings":"","what":"control (argument)","title":"Create a label list — create.label","text":"control name label vector names used negative label. values equal case control dropped. Default NULL case: variable binary, value equal case used negative. variable multiple values, values equal cases used negative label (testing one vs rest).","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-p.lab","dir":"Reference","previous_headings":"","what":"p.lab (argument)","title":"Create a label list — create.label","text":"p.lab name positive group (useful mostly visualizations). Default NULL case value positive group used.","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-n.lab","dir":"Reference","previous_headings":"","what":"n.lab (argument)","title":"Create a label list — create.label","text":"n.lab name negative group (useful mostly visualizations). Default NULL case value negative group used binary variables \"rest\" used variables multiple values.","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-remove.meta.column","dir":"Reference","previous_headings":"","what":"remove.meta.column (argument)","title":"Create a label list — create.label","text":"remove.meta.column boolean indicating label column metadata retained. Please note set TRUE, function return list result. Defaults FALSE","code":""},{"path":"/reference/create.label.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Create a label list — create.label","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/create.label.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a label list — create.label","text":"return either list used SIMCAT object list entries meta label, remove.meta.column set TRUE","code":""},{"path":"/reference/create.label.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a label list — create.label","text":"function creates list used label SIAMCAT object. Mainly interal use, can used customize label (p.lab n.lab used labels plotting, example). input function can either named vector encoding label name column metadata (needs provided well) contains label information.","code":""},{"path":"/reference/data_split-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the data split from a SIAMCAT object — data_split","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"Function retrieve data split stored data_split slot within SIAMCAT object","code":""},{"path":"/reference/data_split-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"","code":"data_split(siamcat, verbose=1)  # S4 method for siamcat data_split(siamcat, verbose = 1)"},{"path":"/reference/data_split-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"siamcat (Required). instance siamcat-class containing data split","code":""},{"path":"/reference/data_split-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/data_split-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"list containing data split information NULL","code":""},{"path":"/reference/data_split-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the data split from a SIAMCAT object — data_split","text":"function returns list containing information data split. See create.data.split details.","code":""},{"path":"/reference/eval_data-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"Function retrieve evaluation metrics SIAMCAT object","code":""},{"path":"/reference/eval_data-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"","code":"eval_data(siamcat, verbose=1)  # S4 method for siamcat eval_data(siamcat, verbose = 1)"},{"path":"/reference/eval_data-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"siamcat (Required). siamcat-class object contains evaluation data","code":""},{"path":"/reference/eval_data-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/eval_data-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"list evaluation data NULL","code":""},{"path":"/reference/eval_data-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the evaluation metrics from a SIAMCAT object — eval_data","text":"functions returns list containing evaluation metrics SIAMCAT object. See evaluate.predictions information evaluation data.","code":""},{"path":"/reference/evaluate.predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate prediction results — evaluate.predictions","title":"Evaluate prediction results — evaluate.predictions","text":"function takes correct labels predictions     samples evaluates results using Area Receiver Operating Characteristic (ROC)             Curve (AU-ROC) Precision-Recall Curve (PR) metric. Predictions can supplied either single case     matrix resampling dataset. Prediction results usually produced function     make.predictions.","code":""},{"path":"/reference/evaluate.predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate prediction results — evaluate.predictions","text":"","code":"evaluate.predictions(siamcat, verbose = 1)"},{"path":"/reference/evaluate.predictions.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Evaluate prediction results — evaluate.predictions","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/evaluate.predictions.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Evaluate prediction results — evaluate.predictions","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/evaluate.predictions.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate prediction results — evaluate.predictions","text":"object class siamcat-class     slot eval_data filled","code":""},{"path":"/reference/evaluate.predictions.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate prediction results — evaluate.predictions","text":"functions calculates several metrices predictions     pred_matrix-slot siamcat-class-object.     Area Receiver Operating Characteristic (ROC)     Curve (AU-ROC) Precision-Recall Curve evaluated     results saved eval_data-slot     supplied siamcat-class-object. eval_data-slot     contains list several entries: $roc - average ROC-curve across repeats                 single ROC-curve complete dataset (see roc); $auroc - AUC value average ROC-curve; $prc - list containing positive predictive value                 (precision) true positive rate (recall) values used                 plot mean PR curve; $auprc - AUC value mean PR curve; $ev - list containing different decision thresholds                 number false positives, false negatives, true                 negatives, true positives. case repeated cross-validation, function     additonally return $roc.- list roc objects (see roc)                 every repeat; $auroc.- vector AUC values ROC curves                 every repeat; $prc.- list PR curves every repeat; $auprc.- vector AUC values PR curves                 every repeat; $ev.- list ev lists (see )                 every repeat.","code":""},{"path":"/reference/feat.crc.zeller.html","id":null,"dir":"Reference","previous_headings":"","what":"Example feature matrix — feat.crc.zeller","title":"Example feature matrix — feat.crc.zeller","text":"Feature matrix (data.frame) CRC dataset Zeller et al. MSB 2014 (see http://msb.embopress.org/content/10/11/766), containing 141 samples 1754 bacterial species (features).","code":""},{"path":"/reference/feat.crc.zeller.html","id":"section-source","dir":"Reference","previous_headings":"","what":"Source","title":"Example feature matrix — feat.crc.zeller","text":"http://msb.embopress.org/content/10/11/766","code":""},{"path":"/reference/feature_type-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"Function retrieve information type features models trained","code":""},{"path":"/reference/feature_type-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"","code":"feature_type(siamcat, verbose=1)  # S4 method for siamcat feature_type(siamcat, verbose = 1)"},{"path":"/reference/feature_type-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"siamcat (Required). instance siamcat-class contains trained models","code":""},{"path":"/reference/feature_type-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/feature_type-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"string describing type feature used model training NULL","code":""},{"path":"/reference/feature_type-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the feature type used for model training from a SIAMCAT\nobject — feature_type","text":"function extracts information type features models trained.","code":""},{"path":"/reference/feature_weights-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"Function extract feature weights SIAMCAT object","code":""},{"path":"/reference/feature_weights-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"","code":"feature_weights(siamcat, verbose=1)  # S4 method for siamcat feature_weights(siamcat, verbose = 1)"},{"path":"/reference/feature_weights-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"siamcat (Required). siamcat-class object contains trained models","code":""},{"path":"/reference/feature_weights-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/feature_weights-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"dataframe containing mean/median feature weight additional info NULL","code":""},{"path":"/reference/feature_weights-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the matrix of feature weights from a SIAMCAT object — feature_weights","text":"function extracts weight matrix trained models (see weight_matrix) computes several metrics feature weights: mean.weight - mean weight across trained models median.weight - median weight across trained models sd.weight - standard deviation weight across trained models mean.rel.weight - mean relative weight across trained models (model normalized absolute weights) median.rel.weight - median relative weight across trained models sd.rel.weight - standard deviation relative weight across trained models percentage - percentage models feature selected (.e. non-zero)","code":""},{"path":"/reference/filt_feat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"Function retrieve information stored filt_feat slot within SIAMCAT object","code":""},{"path":"/reference/filt_feat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"","code":"filt_feat(siamcat, verbose=1)  # S4 method for siamcat filt_feat(siamcat, verbose = 1)"},{"path":"/reference/filt_feat-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"siamcat (Required). instance siamcat-class contains filtered features","code":""},{"path":"/reference/filt_feat-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/filt_feat-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"list stored filt_feat slot SIAMCAT object NULL","code":""},{"path":"/reference/filt_feat-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the information stored in the filt_feat slot within\na SIAMCAT object — filt_feat","text":"function return list containing information stored filt_feat slot SIAMCAT object. list contains: filt.feat - filtered features matrix, see get.filt_feat.matrix filt.param - parameters used feature filtering, see get.filt_feat.matrix","code":""},{"path":"/reference/filt_params-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"Function retrieve list parameters feature filtering","code":""},{"path":"/reference/filt_params-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"","code":"filt_params(siamcat, verbose=1)  # S4 method for siamcat filt_params(siamcat, verbose = 1)"},{"path":"/reference/filt_params-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"siamcat (Required). instance siamcat-class containing filtered features","code":""},{"path":"/reference/filt_params-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/filt_params-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"list feature filtering parameters NULL","code":""},{"path":"/reference/filt_params-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the list of parameters for feature filtering from a\nSIAMCAT object — filt_params","text":"function returns list feature filtering parameters. See filter.features details.","code":""},{"path":"/reference/filter.features.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform unsupervised feature filtering. — filter.features","title":"Perform unsupervised feature filtering. — filter.features","text":"function performs unsupervised feature filtering. Features     can filtered based abundance, prevalence, variance.     Additionally, unmapped reads may removed.","code":""},{"path":"/reference/filter.features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform unsupervised feature filtering. — filter.features","text":"","code":"filter.features(siamcat, filter.method = \"abundance\",     cutoff = 0.001, rm.unmapped = TRUE,     feature.type='original', verbose = 1)"},{"path":"/reference/filter.features.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/filter.features.html","id":"pkg-arg-filter.method","dir":"Reference","previous_headings":"","what":"filter.method (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"filter.method string, method used filtering features, can one : c('abundance', 'cum.abundance', 'prevalence', 'variance', 'pass'), defaults 'abundance'","code":""},{"path":"/reference/filter.features.html","id":"pkg-arg-cutoff","dir":"Reference","previous_headings":"","what":"cutoff (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"cutoff float, abundace, prevalence, variance cutoff, defaults 0.001 (see Details )","code":""},{"path":"/reference/filter.features.html","id":"pkg-arg-rm.unmapped","dir":"Reference","previous_headings":"","what":"rm.unmapped (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"rm.unmapped boolean, unmapped reads discarded?, defaults TRUE","code":""},{"path":"/reference/filter.features.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"feature.type string, type features function work? Can either \"original\", \"filtered\", \"normalized\". Please change paramter know !","code":""},{"path":"/reference/filter.features.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Perform unsupervised feature filtering. — filter.features","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/filter.features.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform unsupervised feature filtering. — filter.features","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/filter.features.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform unsupervised feature filtering. — filter.features","text":"function filters features siamcat-class     object unsupervised manner. different filter methods work following way: 'abundace' - remove features whose maximum abundance     never threshold value samples 'cum.abundance' - remove features low abundance     samples, .e. never among abundant     entities collectively make (1-cutoff) reads     sample 'prevalence' - remove features low prevalence across     samples, .e. undetected (relative abundance 0)     1 - cutoff percent samples. 'variance' - remove features low variance across     samples, .e. variance lower cutoff 'pass' - pass-filtering change     features Features can also filtered repeatedly different methods, e.g.     first using maximum abundance filtering using prevalence     filtering.     However, filtering method already applied dataset,     SIAMCAT default back original features filtering.","code":""},{"path":"/reference/filter.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter the label of a SIMACAT object — filter.label","title":"Filter the label of a SIMACAT object — filter.label","text":"functions filters label SIAMCAT object","code":""},{"path":"/reference/filter.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter the label of a SIMACAT object — filter.label","text":"","code":"filter.label(siamcat, ids, verbose = 1)"},{"path":"/reference/filter.label.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Filter the label of a SIMACAT object — filter.label","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/filter.label.html","id":"pkg-arg-ids","dir":"Reference","previous_headings":"","what":"ids (argument)","title":"Filter the label of a SIMACAT object — filter.label","text":"ids vector, can contain either names indices samples retained","code":""},{"path":"/reference/filter.label.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Filter the label of a SIMACAT object — filter.label","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/filter.label.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter the label of a SIMACAT object — filter.label","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/filter.label.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter the label of a SIMACAT object — filter.label","text":"function filters label contained SIAMCAT object, based provided ids. IDs can either sample names indices retained. Predominantly internal use... Please note: makes sense run validate.data filtering label.","code":""},{"path":"/reference/get.component.classes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the component objects classes and slot names. — get.component.classes","title":"Show the component objects classes and slot names. — get.component.classes","text":"Show component objects classes slot names.","code":""},{"path":"/reference/get.component.classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the component objects classes and slot names. — get.component.classes","text":"","code":"get.component.classes(class)"},{"path":"/reference/get.component.classes.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the component objects classes and slot names. — get.component.classes","text":"list component classes","code":""},{"path":"/reference/get.filt_feat.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","title":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","text":"Function retrieve filtered features SIAMCAT object","code":""},{"path":"/reference/get.filt_feat.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","text":"","code":"get.filt_feat.matrix(siamcat)"},{"path":"/reference/get.filt_feat.matrix.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","text":"siamcat (Required). instance siamcat-class containing filtered features","code":""},{"path":"/reference/get.filt_feat.matrix.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","text":"matrix containing filtered features","code":""},{"path":"/reference/get.filt_feat.matrix.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the filtered features from a SIAMCAT object — get.filt_feat.matrix","text":"function returns filtered features matrix. See filter.features details.","code":""},{"path":"/reference/get.norm_feat.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","title":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","text":"Function retrieve normalized features SIAMCAT object","code":""},{"path":"/reference/get.norm_feat.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","text":"","code":"get.norm_feat.matrix(siamcat)"},{"path":"/reference/get.norm_feat.matrix.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","text":"siamcat (Required). instance siamcat-class containing normalized features","code":""},{"path":"/reference/get.norm_feat.matrix.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","text":"matrix containing normalized features","code":""},{"path":"/reference/get.norm_feat.matrix.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the normalized features from a SIAMCAT object — get.norm_feat.matrix","text":"function returns normalized features matrix. See normalize.features details.","code":""},{"path":"/reference/get.orig_feat.matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","title":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","text":"Function retrieve original features SIAMCAT object","code":""},{"path":"/reference/get.orig_feat.matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","text":"","code":"get.orig_feat.matrix(siamcat)"},{"path":"/reference/get.orig_feat.matrix.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","text":"siamcat (Required). instance siamcat-class","code":""},{"path":"/reference/get.orig_feat.matrix.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","text":"matrix containing original features","code":""},{"path":"/reference/get.orig_feat.matrix.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the original features from a SIAMCAT object — get.orig_feat.matrix","text":"function returns original features matrix.","code":""},{"path":"/reference/label-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the label from a SIAMCAT object — label","title":"Retrieve the label from a SIAMCAT object — label","text":"Retrieve label SIAMCAT object","code":""},{"path":"/reference/label-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the label from a SIAMCAT object — label","text":"","code":"label(siamcat, verbose=1)  # S4 method for siamcat label(siamcat, verbose = 1)"},{"path":"/reference/label-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the label from a SIAMCAT object — label","text":"siamcat (Required). siamcat-class object","code":""},{"path":"/reference/label-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the label from a SIAMCAT object — label","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/label-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the label from a SIAMCAT object — label","text":"label NULL.","code":""},{"path":"/reference/label-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the label from a SIAMCAT object — label","text":"function retrieve label information SIAMCAT object. label contain three entries: label: label named vector, classes encoded numerically info: Information different classes type: kind label ?","code":""},{"path":"/reference/make.predictions.html","id":null,"dir":"Reference","previous_headings":"","what":"Make predictions on a test set — make.predictions","title":"Make predictions on a test set — make.predictions","text":"function takes siamcat-class-object containing     model trained train.model performs predictions     given test-set.","code":""},{"path":"/reference/make.predictions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make predictions on a test set — make.predictions","text":"","code":"make.predictions(siamcat, siamcat.holdout = NULL,     normalize.holdout = TRUE, verbose = 1)"},{"path":"/reference/make.predictions.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Make predictions on a test set — make.predictions","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/make.predictions.html","id":"pkg-arg-siamcat.holdout","dir":"Reference","previous_headings":"","what":"siamcat.holdout (argument)","title":"Make predictions on a test set — make.predictions","text":"siamcat.holdout optional, object class siamcat-class make predictions, defaults NULL","code":""},{"path":"/reference/make.predictions.html","id":"pkg-arg-normalize.holdout","dir":"Reference","previous_headings":"","what":"normalize.holdout (argument)","title":"Make predictions on a test set — make.predictions","text":"normalize.holdout boolean, holdout features normalized frozen normalization (see normalize.features) using normalization parameters siamcat?, defaults TRUE","code":""},{"path":"/reference/make.predictions.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Make predictions on a test set — make.predictions","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/make.predictions.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Make predictions on a test set — make.predictions","text":"object class siamcat-class slot pred_matrix     filled","code":""},{"path":"/reference/make.predictions.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Make predictions on a test set — make.predictions","text":"functions uses model model_list-slot     siamcat object make predictions given test set.     test set can either consist test instances cross-     validation, saved data_split-slot     siamcat object, completely external feature set, given     form another siamcat object (siamcat.holdout).","code":""},{"path":"/reference/meta-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the metadata from a SIAMCAT object — meta","title":"Retrieve the metadata from a SIAMCAT object — meta","text":"Retrieve metadata SIAMCAT object","code":""},{"path":"/reference/meta-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the metadata from a SIAMCAT object — meta","text":"","code":"meta(siamcat)  # S4 method for siamcat meta(siamcat)  # S4 method for sample_data meta(siamcat)"},{"path":"/reference/meta-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the metadata from a SIAMCAT object — meta","text":"siamcat (Required). siamcat-class object","code":""},{"path":"/reference/meta-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the metadata from a SIAMCAT object — meta","text":"metadata sample_data-class object","code":""},{"path":"/reference/meta-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the metadata from a SIAMCAT object — meta","text":"function retrieve metadata SIAMCAT object. metadata object sample_data-class.","code":""},{"path":"/reference/meta.crc.zeller.html","id":null,"dir":"Reference","previous_headings":"","what":"Example metadata matrix — meta.crc.zeller","title":"Example metadata matrix — meta.crc.zeller","text":"Metadata (data.frame) CRC dataset Zeller et al. MSB 2014 (see http://msb.embopress.org/content/10/11/766), containing 6 metadata variables variables (e.g. Age BMI) 141 samples.","code":""},{"path":"/reference/meta.crc.zeller.html","id":"section-source","dir":"Reference","previous_headings":"","what":"Source","title":"Example metadata matrix — meta.crc.zeller","text":"http://msb.embopress.org/content/10/11/766","code":""},{"path":"/reference/model.evaluation.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Evaluation Plot — model.evaluation.plot","title":"Model Evaluation Plot — model.evaluation.plot","text":"Produces two plots model evaluation. first plot shows     Receiver Operating Characteristic (ROC)-curves,     Precision-recall (PR)-curves different cross-validation     repetitions.","code":""},{"path":"/reference/model.evaluation.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Evaluation Plot — model.evaluation.plot","text":"","code":"model.evaluation.plot(..., fn.plot = NULL,     colours=NULL, show.all=FALSE, verbose = 1)"},{"path":"/reference/model.evaluation.plot.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"Model Evaluation Plot — model.evaluation.plot","text":"... one object class siamcat-class, can named","code":""},{"path":"/reference/model.evaluation.plot.html","id":"pkg-arg-fn.plot","dir":"Reference","previous_headings":"","what":"fn.plot (argument)","title":"Model Evaluation Plot — model.evaluation.plot","text":"fn.plot string, filename pdf-plot","code":""},{"path":"/reference/model.evaluation.plot.html","id":"pkg-arg-colours","dir":"Reference","previous_headings":"","what":"colours (argument)","title":"Model Evaluation Plot — model.evaluation.plot","text":"colours colour specification different siamcat-class- objects, defaults NULL cause colours picked 'Set1' palette","code":""},{"path":"/reference/model.evaluation.plot.html","id":"pkg-arg-show.all","dir":"Reference","previous_headings":"","what":"show.all (argument)","title":"Model Evaluation Plot — model.evaluation.plot","text":"show.boolean, repeated cross-validation models plotted?","code":""},{"path":"/reference/model.evaluation.plot.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Model Evaluation Plot — model.evaluation.plot","text":"verbose control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/model.evaluation.plot.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Evaluation Plot — model.evaluation.plot","text":"return anything, produces model evaluation plot.","code":""},{"path":"/reference/model.interpretation.plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Interpretation Plot — model.interpretation.plot","title":"Model Interpretation Plot — model.interpretation.plot","text":"function produces plot model interpretation, displaying feature weights, robustness feature weights features scores across samples, distribution metadata across samples, proportion model weights shown.","code":""},{"path":"/reference/model.interpretation.plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Interpretation Plot — model.interpretation.plot","text":"","code":"model.interpretation.plot(siamcat, fn.plot = NULL,     color.scheme = \"BrBG\",     consens.thres = 0.5,     heatmap.type = \"zscore\",     limits = c(-3, 3), detect.lim = 1e-06,     max.show = 50, prompt=TRUE, verbose = 1)"},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-fn.plot","dir":"Reference","previous_headings":"","what":"fn.plot (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"fn.plot string, filename pdf-plot","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-color.scheme","dir":"Reference","previous_headings":"","what":"color.scheme (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"color.scheme color scheme heatmap, defaults 'BrBG'","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-consens.thres","dir":"Reference","previous_headings":"","what":"consens.thres (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"consens.thres float, minimal ratio models incorporating feature order include heatmap, defaults 0.5 Note 'randomForest' models, cutoff specifies minimum median Gini coefficient feature included therefore much lower, e.g. 0.01","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-heatmap.type","dir":"Reference","previous_headings":"","what":"heatmap.type (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"heatmap.type string, type heatmap, can either 'fc' 'zscore', defaults 'zscore'","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-limits","dir":"Reference","previous_headings":"","what":"limits (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"limits vector, cutoff extreme values heatmap, defaults c(-3, 3)","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-detect.lim","dir":"Reference","previous_headings":"","what":"detect.lim (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"detect.lim float, pseudocount added log-transformation features, defaults 1e-06","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-max.show","dir":"Reference","previous_headings":"","what":"max.show (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"max.show integer, maximum number features shown model interpretation plot, defaults 50","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-prompt","dir":"Reference","previous_headings":"","what":"prompt (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"prompt boolean, turn /prompting user input plotting pdf-file, defaults TRUE","code":""},{"path":"/reference/model.interpretation.plot.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Model Interpretation Plot — model.interpretation.plot","text":"verbose control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/model.interpretation.plot.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Interpretation Plot — model.interpretation.plot","text":"return anything, produces model interpretion plot.","code":""},{"path":"/reference/model.interpretation.plot.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Interpretation Plot — model.interpretation.plot","text":"Produces plot consisting barplot showing feature weights robustness (.e.     proportion models incorporated) heatmap showing z-scores metagenomic features across     patients another heatmap displaying metadata categories (applicable) boxplot displaying poportion weight per model     actually shown features incorporated     consens.thres percent models.","code":""},{"path":"/reference/model_list-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"Function retrieve information stored model_list slot within SIAMCAT object","code":""},{"path":"/reference/model_list-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"","code":"model_list(siamcat, verbose=1)  # S4 method for siamcat model_list(siamcat, verbose = 1)"},{"path":"/reference/model_list-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"siamcat (Required). instance siamcat-class contains trained models","code":""},{"path":"/reference/model_list-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/model_list-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"list stored model_list slot SIAMCAT object NULL","code":""},{"path":"/reference/model_list-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the information stored in the model_list slot within\na SIAMCAT object — model_list","text":"function return list containing information stored model_list slot SIAMCAT object. list contains: models - list trained models model_type - machine learning method used training feature_type - string describing type features models trained","code":""},{"path":"/reference/model_type-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the machine learning method from a SIAMCAT object — model_type","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"Function retrieve information type machine learning method used model training","code":""},{"path":"/reference/model_type-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"","code":"model_type(siamcat, verbose=1)  # S4 method for siamcat model_type(siamcat, verbose = 1)"},{"path":"/reference/model_type-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"siamcat (Required). instance siamcat-class contains trained models","code":""},{"path":"/reference/model_type-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/model_type-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"string describing machine learning method NULL","code":""},{"path":"/reference/model_type-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the machine learning method from a SIAMCAT object — model_type","text":"function extracts information type machine learning method used model training.","code":""},{"path":"/reference/models-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve list of trained models from a SIAMCAT object — models","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"Function retrieve list trained models","code":""},{"path":"/reference/models-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"","code":"models(siamcat, verbose=1)  # S4 method for siamcat models(siamcat, verbose = 1)"},{"path":"/reference/models-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"siamcat (Required). instance siamcat-class contains trained models","code":""},{"path":"/reference/models-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/models-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"list models NULL","code":""},{"path":"/reference/models-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve list of trained models from a SIAMCAT object — models","text":"function extracts list trained models.","code":""},{"path":"/reference/norm_feat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"Function retrieve information stored norm_feat slot within SIAMCAT object","code":""},{"path":"/reference/norm_feat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"","code":"norm_feat(siamcat, verbose=1)  # S4 method for siamcat norm_feat(siamcat, verbose = 1)"},{"path":"/reference/norm_feat-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"siamcat (Required). instance siamcat-class contains normalized features","code":""},{"path":"/reference/norm_feat-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/norm_feat-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"list stored norm_feat slot SIAMCAT object NULL","code":""},{"path":"/reference/norm_feat-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the information stored in the norm_feat slot within\na SIAMCAT object — norm_feat","text":"function return list containing information stored norm_feat slot SIAMCAT object. list contains: norm.feat - normalized features matrix, see get.norm_feat.matrix norm.param - parameters used normalization, see normalize.features","code":""},{"path":"/reference/norm_params-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"Function retrieve list parameters feature normalization","code":""},{"path":"/reference/norm_params-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"","code":"norm_params(siamcat, verbose=1)  # S4 method for siamcat norm_params(siamcat, verbose = 1)"},{"path":"/reference/norm_params-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"siamcat (Required). instance siamcat-class containing normalized features","code":""},{"path":"/reference/norm_params-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/norm_params-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"list normalization parameters NULL","code":""},{"path":"/reference/norm_params-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the list of parameters for feature normalization from a\nSIAMCAT object — norm_params","text":"function returns list normalization parameters used feature normalization procedure. See normalize.features details.","code":""},{"path":"/reference/normalize.features.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform feature normalization — normalize.features","title":"Perform feature normalization — normalize.features","text":"function performs feature normalization according user-     specified parameters.","code":""},{"path":"/reference/normalize.features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform feature normalization — normalize.features","text":"","code":"normalize.features(siamcat,     norm.method = c(\"rank.unit\", \"rank.std\",         \"log.std\", \"log.unit\", \"log.clr\", \"std\", \"pass\"),     norm.param = list(log.n0 = 1e-06, sd.min.q = 0.1,         n.p = 2, norm.margin = 1),     feature.type='filtered',     verbose = 1)"},{"path":"/reference/normalize.features.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Perform feature normalization — normalize.features","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/normalize.features.html","id":"pkg-arg-norm.method","dir":"Reference","previous_headings":"","what":"norm.method (argument)","title":"Perform feature normalization — normalize.features","text":"norm.method string, normalization method, can one : 'c('rank.unit', 'rank.std', 'log.std', 'log.unit', 'log.clr', 'std', 'pass')","code":""},{"path":"/reference/normalize.features.html","id":"pkg-arg-norm.param","dir":"Reference","previous_headings":"","what":"norm.param (argument)","title":"Perform feature normalization — normalize.features","text":"norm.param list, specifying parameters different normalization methods, see details information","code":""},{"path":"/reference/normalize.features.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Perform feature normalization — normalize.features","text":"feature.type string, type features function work? Can either \"original\", \"filtered\", \"normalized\". Please change paramter know !","code":""},{"path":"/reference/normalize.features.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Perform feature normalization — normalize.features","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/normalize.features.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform feature normalization — normalize.features","text":"object class siamcat-class normalized features","code":""},{"path":"/reference/normalize.features.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform feature normalization — normalize.features","text":"seven different normalization methods available: 'rank.unit' - converts features ranks normalizes     column (=sample) square root sum ranks 'rank.std' - converts features ranks applies z-score     standardization 'log.clr' - centered log-ratio transformation (    addition pseudocounts) 'log.std' - log-transforms features (addition     pseudocounts) applies z-score standardization 'log.unit' - log-transforms features (addition     pseudocounts) normalizes features samples different norms 'std' - z-score standardization without     transformation 'pass' - pass-normalization change     features list entries 'norm.param' specify normalzation parameters, dependant normalization method choice: 'rank.unit' 'pass' require parameters 'rank.std' 'std' requires sd.min.q, quantile     distribution standard deviations features     added denominator standardization order avoid     underestimation standard deviation, defaults 0.1 'log.clr' requires log.n0, pseudocount     added log-transformation, defaults NULL leading     estimation log.n0 data 'log.std' requires log.n0 sd.min.q,     using default values 'log.unit' requires next log.n0 also     parameters n.p norm.margin. n.p specifies     vector norm used, can either 1 x/sum(x)     2 x/sqrt(sum(x^2)). parameter norm.margin     specifies margin normalize, similarly     apply-syntax: Allowed values 1 normalization     features, 2 samples, 3 normalization     global maximum. function additionally allows perform frozen normalization different dataset. normalizing first dataset, norm_feat slot siamcat object contains parameters normalization, can access via norm_params accessor. order perform frozen normalization new dataset, can run function supplying normalization parameters argument norm.param: norm.param=norm_params(siamcat_reference). See also example .","code":""},{"path":"/reference/orig_feat-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a otu_table-class object from otu_table slot in\nthe phyloseq slot in a siamcat object — orig_feat","title":"Retrieve a otu_table-class object from otu_table slot in\nthe phyloseq slot in a siamcat object — orig_feat","text":"Retrieve otu_table-class object otu_table slot phyloseq slot siamcat object","code":""},{"path":"/reference/orig_feat-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a otu_table-class object from otu_table slot in\nthe phyloseq slot in a siamcat object — orig_feat","text":"","code":"orig_feat(siamcat)  # S4 method for siamcat orig_feat(siamcat)  # S4 method for otu_table orig_feat(siamcat)"},{"path":"/reference/orig_feat-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve a otu_table-class object from otu_table slot in\nthe phyloseq slot in a siamcat object — orig_feat","text":"siamcat (Required). instance siamcat-class contains label instance otu_table-class.","code":""},{"path":"/reference/orig_feat-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a otu_table-class object from otu_table slot in\nthe phyloseq slot in a siamcat object — orig_feat","text":"otu_table-class object NULL.","code":""},{"path":"/reference/parse.label.header.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse label header — parse.label.header","title":"Parse label header — parse.label.header","text":"function parses header label file","code":""},{"path":"/reference/parse.label.header.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse label header — parse.label.header","text":"","code":"parse.label.header(label.header)"},{"path":"/reference/parse.label.header.html","id":"pkg-arg-label.header","dir":"Reference","previous_headings":"","what":"label.header (argument)","title":"Parse label header — parse.label.header","text":"label.header - string format: #<TYPE>:<L1>=<class1>; <L2>=<class2>[;<L3>=<class3>] <TYPE> string specifying type label variable BINARY (binary classification), CATEGORICAL (multi-class classification), CONTINUOUS (regression) <L1> short numeric label first class description <class1> (similarly classes)","code":""},{"path":"/reference/parse.label.header.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse label header — parse.label.header","text":"list tow items $type type label: BINARY CONTINUOUS CATEGORICAL $class.descr lables information mean","code":""},{"path":"/reference/physeq-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve a phyloseq-class object from object. — physeq","title":"Retrieve a phyloseq-class object from object. — physeq","text":"Retrieve phyloseq-class object object.","code":""},{"path":"/reference/physeq-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve a phyloseq-class object from object. — physeq","text":"","code":"physeq(siamcat, verbose=1)  # S4 method for ANY physeq(siamcat, verbose = 1)  # S4 method for phyloseq physeq(siamcat)"},{"path":"/reference/physeq-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve a phyloseq-class object from object. — physeq","text":"siamcat (Required). instance siamcat-class contains label instance phyloseq-class.","code":""},{"path":"/reference/physeq-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve a phyloseq-class object from object. — physeq","text":"verbose slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/physeq-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve a phyloseq-class object from object. — physeq","text":"phyloseq-class object NULL.","code":""},{"path":"/reference/pred_matrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"Function retrieve prediction matrix SIAMCAT object","code":""},{"path":"/reference/pred_matrix-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"","code":"pred_matrix(siamcat, verbose=1)  # S4 method for siamcat pred_matrix(siamcat, verbose = 1)"},{"path":"/reference/pred_matrix-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"siamcat (Required). siamcat-class object contains prediction matrix","code":""},{"path":"/reference/pred_matrix-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/pred_matrix-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"matrix containing predictions NULL","code":""},{"path":"/reference/pred_matrix-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the prediction matrix from a SIAMCAT object — pred_matrix","text":"functions returns matrix containing predictions samples across different cross-validation repeats. See make.predictions information.","code":""},{"path":"/reference/read.label.html","id":null,"dir":"Reference","previous_headings":"","what":"Read label file — read.label","title":"Read label file — read.label","text":"Read label information file","code":""},{"path":"/reference/read.label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read label file — read.label","text":"","code":"read.label(fn.in.label)"},{"path":"/reference/read.label.html","id":"pkg-arg-fn.in.label","dir":"Reference","previous_headings":"","what":"fn.in.label (argument)","title":"Read label file — read.label","text":"fn..label name tsv file containing labels","code":""},{"path":"/reference/read.label.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Read label file — read.label","text":"label object containing several entries: $label named vector containing numerical labels file; $info information classes label; $type information label type (e.g. BINARY);","code":""},{"path":"/reference/read.label.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Read label file — read.label","text":"function reads tsv file labels converts label. First row expected #BINARY:1=[label cases]; -1=[label controls]. Second row contain sample identifiers tab-separated list (consistent feature metadata). Third row expected contain actual class labels (tab-separated): 1 case -1 control. Note: Labels can take numeric values (characters strings); importantly, label cases greater one controls","code":""},{"path":"/reference/read.lefse.html","id":null,"dir":"Reference","previous_headings":"","what":"read an input file in a LEfSe input format — read.lefse","title":"read an input file in a LEfSe input format — read.lefse","text":"reads input file LEfSe input format","code":""},{"path":"/reference/read.lefse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read an input file in a LEfSe input format — read.lefse","text":"","code":"read.lefse(filename = \"data.txt\", rows.meta = 1, row.samples = 2)"},{"path":"/reference/read.lefse.html","id":"pkg-arg-filename","dir":"Reference","previous_headings":"","what":"filename (argument)","title":"read an input file in a LEfSe input format — read.lefse","text":"filename name input file LEfSe input format","code":""},{"path":"/reference/read.lefse.html","id":"pkg-arg-rows.meta","dir":"Reference","previous_headings":"","what":"rows.meta (argument)","title":"read an input file in a LEfSe input format — read.lefse","text":"rows.meta specifies rows medata variables stored","code":""},{"path":"/reference/read.lefse.html","id":"pkg-arg-row.samples","dir":"Reference","previous_headings":"","what":"row.samples (argument)","title":"read an input file in a LEfSe input format — read.lefse","text":"row.samples specifies row sample names stored","code":""},{"path":"/reference/read.lefse.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"read an input file in a LEfSe input format — read.lefse","text":"list two elements: feat features matrix meta metadate matrix","code":""},{"path":"/reference/select.samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Select samples based on metadata — select.samples","title":"Select samples based on metadata — select.samples","text":"function select samples based information given metadata","code":""},{"path":"/reference/select.samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select samples based on metadata — select.samples","text":"","code":"select.samples(siamcat, filter, allowed.set = NULL,     allowed.range = NULL, verbose = 1)"},{"path":"/reference/select.samples.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Select samples based on metadata — select.samples","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/select.samples.html","id":"pkg-arg-filter","dir":"Reference","previous_headings":"","what":"filter (argument)","title":"Select samples based on metadata — select.samples","text":"filter string, name meta variable selection done","code":""},{"path":"/reference/select.samples.html","id":"pkg-arg-allowed.set","dir":"Reference","previous_headings":"","what":"allowed.set (argument)","title":"Select samples based on metadata — select.samples","text":"allowed.set vector allowed values","code":""},{"path":"/reference/select.samples.html","id":"pkg-arg-allowed.range","dir":"Reference","previous_headings":"","what":"allowed.range (argument)","title":"Select samples based on metadata — select.samples","text":"allowed.range range allowed values","code":""},{"path":"/reference/select.samples.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Select samples based on metadata — select.samples","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/select.samples.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Select samples based on metadata — select.samples","text":"object class siamcat-class labels metadata         filtered order contain allowed values","code":""},{"path":"/reference/select.samples.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Select samples based on metadata — select.samples","text":"functions selects labels metadata based specific column metadata. Provided column-name metadata range set allowed values, function filter siamcat-class object accordingly.","code":""},{"path":"/reference/show-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Show method for siamcat class object — show,siamcat-method","title":"Show method for siamcat class object — show,siamcat-method","text":"Show method siamcat class object","code":""},{"path":"/reference/show-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show method for siamcat class object — show,siamcat-method","text":"","code":"# S4 method for siamcat show(object)"},{"path":"/reference/show-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Show method for siamcat class object — show,siamcat-method","text":"none","code":""},{"path":"/reference/siamcat-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The S4 SIAMCAT class — siamcat-class","title":"The S4 SIAMCAT class — siamcat-class","text":"SIAMCAT class","code":""},{"path":"/reference/siamcat-class.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"The S4 SIAMCAT class — siamcat-class","text":"S4 SIAMCAT class stores results SIAMCAT workflow different slots. different slots filled different functions (referenced description ). order contruct SIAMCAT class object, please refer documentation construction function siamcat. SIAMCAT class based phyloseq-class. Therefore, can easily import phyloseq object SIAMCAT.","code":""},{"path":"/reference/siamcat-class.html","id":"section-slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The S4 SIAMCAT class — siamcat-class","text":"phyloseq object class phyloseq-class label list containing label information samples metadata label, created create.label creating siamcat-class object calling siamcat filt_feat list containing filtered features matrix list filtering parameters, created calling filter.features function associations list containing parameters association testing results association testing parameters dataframe, created calling check.associations function norm_feat list containing normalized features matrix list normalziation parameters (frozen normalization), created calling normalize.features function data_split list containing cross-validation instances, created calling create.data.split function model_list list containing trained models, type model trained, kind features trained, created calling train.model function pred_matrix matrix predictions, created calling make.predictions function eval_data list containing different evaluation metrics, created calling evaluate.predictions function","code":""},{"path":"/reference/siamcat.html","id":null,"dir":"Reference","previous_headings":"","what":"SIAMCAT constructor function — siamcat","title":"SIAMCAT constructor function — siamcat","text":"Function construct object class siamcat-class","code":""},{"path":"/reference/siamcat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SIAMCAT constructor function — siamcat","text":"","code":"siamcat(..., feat=NULL, label=NULL, meta=NULL,     phyloseq=NULL, validate=TRUE, verbose=3)"},{"path":"/reference/siamcat.html","id":"pkg-arg-...","dir":"Reference","previous_headings":"","what":"... (argument)","title":"SIAMCAT constructor function — siamcat","text":"... additional arguments","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-feat","dir":"Reference","previous_headings":"","what":"feat (argument)","title":"SIAMCAT constructor function — siamcat","text":"feat feature information SIAMCAT (see details)","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-label","dir":"Reference","previous_headings":"","what":"label (argument)","title":"SIAMCAT constructor function — siamcat","text":"label label information SIAMCAT (see details)","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-meta","dir":"Reference","previous_headings":"","what":"meta (argument)","title":"SIAMCAT constructor function — siamcat","text":"meta (optional) metadata information SIAMCAT (see details)","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-phyloseq","dir":"Reference","previous_headings":"","what":"phyloseq (argument)","title":"SIAMCAT constructor function — siamcat","text":"phyloseq (optional) phyloseq object creation SIAMCAT object (see details)","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-validate","dir":"Reference","previous_headings":"","what":"validate (argument)","title":"SIAMCAT constructor function — siamcat","text":"validate boolean, newly constructed SIAMCAT object validated? defaults TRUE (strongly recommend setting parameter FALSE)","code":""},{"path":"/reference/siamcat.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"SIAMCAT constructor function — siamcat","text":"verbose control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/siamcat.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"SIAMCAT constructor function — siamcat","text":"new siamcat-class object","code":""},{"path":"/reference/siamcat.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"SIAMCAT constructor function — siamcat","text":"Build siamcat-class objects components. functions creates SIAMCAT object (see siamcat-class). order , function needs feat feature information SIAMCAT, either matrix, data.frame, otu_table-class. columns correspond different samples (e.g. patients) rows different features (e.g. taxa). Columns rows named. meta metadata information different samples feature matrix. Metadata optional SIAMCAT workflow. either data.frame (rownames corresponding sample names feature matrix) object class sample_data-class phyloseq Alternatively supplying feat meta, SIAMCAT can also work phyloseq object containing otu_table optional slots (like sample_data meta-variables). Notice: supply either feature information matrix/data.frame/otu_table (optionally metadata) phyloseq object, . label information SIAMCAT can take several forms: metadata column: metadata (either via meta sample_data phyloseq object), label object can created taking information specific metadata column. order , label name column, case indicate group(s) positive group(s). typical example look like : siamcat <- siamcat(feat=feat.matrix, meta=metadata,     label='DiseaseState', case='CRC') construction label predict CRC status (encoded column \"DiseaseState\" metadata). control (e.g. specific labels plotting specific control state), label can also created outside siamcat function using create.label function. named vector: label can also supplied named vector encodes label either characters (e.g. \"Healthy\" \"Diseased\"), factor, numerically (e.g. -1 1). vector must named names samples (corresponding samples features). Also , information positive group(s) needed via case parameter. Internally, vector given create.label function. label object: label object can created create.label function reading dedicated label file read.label.","code":""},{"path":"/reference/siamcat.to.lefse.html","id":null,"dir":"Reference","previous_headings":"","what":"create a lefse input file from siamcat object — siamcat.to.lefse","title":"create a lefse input file from siamcat object — siamcat.to.lefse","text":"function creates lefse input file siamcat object","code":""},{"path":"/reference/siamcat.to.lefse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a lefse input file from siamcat object — siamcat.to.lefse","text":"","code":"siamcat.to.lefse(siamcat, filename = \"siamcat_output.txt\")"},{"path":"/reference/siamcat.to.lefse.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"create a lefse input file from siamcat object — siamcat.to.lefse","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/siamcat.to.lefse.html","id":"pkg-arg-filename","dir":"Reference","previous_headings":"","what":"filename (argument)","title":"create a lefse input file from siamcat object — siamcat.to.lefse","text":"filename name input file data save","code":""},{"path":"/reference/siamcat.to.lefse.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"create a lefse input file from siamcat object — siamcat.to.lefse","text":"nothing data written file","code":""},{"path":"/reference/siamcat.to.maaslin.html","id":null,"dir":"Reference","previous_headings":"","what":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","title":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","text":"function creates MaAsLin merged PCL single input file siamcat object","code":""},{"path":"/reference/siamcat.to.maaslin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","text":"","code":"siamcat.to.maaslin(siamcat, filename = \"siamcat_output.pcl\")"},{"path":"/reference/siamcat.to.maaslin.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/siamcat.to.maaslin.html","id":"pkg-arg-filename","dir":"Reference","previous_headings":"","what":"filename (argument)","title":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","text":"filename name input file data save","code":""},{"path":"/reference/siamcat.to.maaslin.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"create a MaAsLin input file from siamcat object — siamcat.to.maaslin","text":"nothing data written file","code":""},{"path":"/reference/siamcat_example.html","id":null,"dir":"Reference","previous_headings":"","what":"SIAMCAT example — siamcat_example","title":"SIAMCAT example — siamcat_example","text":"Reduced version CRC dataset Zeller et al. MSB 2014 (see http://msb.embopress.org/content/10/11/766), containing 100 features (15 associated features 5% FDR original dataset 85 random features) 141 samples, saved complete SIAMCAT pipelinehas run. Thus, example dataset contains entries every slot SIAMCAT object (see siamcat-class), e.g, eval_data data_split. Mainly used running examples function documentation.","code":""},{"path":"/reference/siamcat_example.html","id":"section-source","dir":"Reference","previous_headings":"","what":"Source","title":"SIAMCAT example — siamcat_example","text":"http://msb.embopress.org/content/10/11/766","code":""},{"path":"/reference/summarize.features.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize features — summarize.features","title":"Summarize features — summarize.features","text":"function summarize features specific taxonomic level","code":""},{"path":"/reference/summarize.features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize features — summarize.features","text":"","code":"summarize.features(siamcat, level = 'g__',                     feature.type='original', verbose=1)"},{"path":"/reference/summarize.features.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Summarize features — summarize.features","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/summarize.features.html","id":"pkg-arg-level","dir":"Reference","previous_headings":"","what":"level (argument)","title":"Summarize features — summarize.features","text":"level string, level summarize (e.g. g__ = genus)","code":""},{"path":"/reference/summarize.features.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Summarize features — summarize.features","text":"feature.type string, type features function work? Can either \"original\", \"filtered\", \"normalized\". Please change paramter know !","code":""},{"path":"/reference/summarize.features.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Summarize features — summarize.features","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/summarize.features.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize features — summarize.features","text":"object class siamcat-class summarized feature table","code":""},{"path":"/reference/summarize.features.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize features — summarize.features","text":"function summarize features different taxonomic levels, e.g. transform species-level relative abundance genus-level taxonomic profiles. function expects SIAMCAT object either contains entry phyloseqtax_table slot phyloseq object, set feature names encode taxonomic information, e.g. k__Bacteria;p__Actinobacteria;c__Actinobacteria;o__Acidimicrobiales;.. , given taxonomic level (e.g. g__), function sum relative abundances features belonging group specific taxonomic level. Please note function currently maturing necessarily reliable!!!","code":""},{"path":"/reference/train.model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model training — train.model","title":"Model training — train.model","text":"function trains machine learning model training data","code":""},{"path":"/reference/train.model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model training — train.model","text":"","code":"train.model(siamcat, method = c(\"lasso\", \"enet\", \"ridge\", \"lasso_ll\", \"ridge_ll\", \"randomForest\"), stratify = TRUE, modsel.crit = list(\"auc\"), min.nonzero.coeff = 1, param.set = NULL, perform.fs = FALSE, param.fs = list(thres.fs = 100, method.fs = \"AUC\", direction='absolute'), feature.type='normalized', verbose = 1)"},{"path":"/reference/train.model.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Model training — train.model","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-method","dir":"Reference","previous_headings":"","what":"method (argument)","title":"Model training — train.model","text":"method string, specifies type model trained, may one : c('lasso', 'enet', 'ridge', 'lasso_ll', 'ridge_ll', 'randomForest')","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-stratify","dir":"Reference","previous_headings":"","what":"stratify (argument)","title":"Model training — train.model","text":"stratify boolean, folds internal cross-validation stratified?, defaults TRUE","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-modsel.crit","dir":"Reference","previous_headings":"","what":"modsel.crit (argument)","title":"Model training — train.model","text":"modsel.crit list, specifies model selection criterion internal cross-validation, may contain : c('auc', 'f1', 'acc', 'pr'), defaults list('auc')","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-min.nonzero.coeff","dir":"Reference","previous_headings":"","what":"min.nonzero.coeff (argument)","title":"Model training — train.model","text":"min.nonzero.coeff integer number minimum nonzero coefficients present model ('lasso', 'ridge', 'enet'), defaults 1","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-param.set","dir":"Reference","previous_headings":"","what":"param.set (argument)","title":"Model training — train.model","text":"param.set list, set extra parameters mlr run, may contain:cost class.weights - lasso_ll ridge_ll alpha - enet ntree mtry - RandomForrest. See details. Defaults NULL","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-perform.fs","dir":"Reference","previous_headings":"","what":"perform.fs (argument)","title":"Model training — train.model","text":"perform.fs boolean, feature selection performed? Defaults FALSE","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-param.fs","dir":"Reference","previous_headings":"","what":"param.fs (argument)","title":"Model training — train.model","text":"param.fs list, parameters feature selection, must contain:thres.fs - threshold feature selection, method.fs - method feature selection, may AUC, gFC, Wilcoxon direction - AUC gFC, select either top associated features (independent sign enrichment), top positively associated featured, top negatively associated features, may absolute, positive, negative. ignored Wilcoxon. See Details information. Defaults list(thres.fs=100, method.fs=\"AUC\", direction='absolute')","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-feature.type","dir":"Reference","previous_headings":"","what":"feature.type (argument)","title":"Model training — train.model","text":"feature.type string, type features function work? Can either \"original\", \"filtered\", \"normalized\". Please change paramter know !","code":""},{"path":"/reference/train.model.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Model training — train.model","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/train.model.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Model training — train.model","text":"object class siamcat-class added model_list","code":""},{"path":"/reference/train.model.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Model training — train.model","text":"functions performs training machine learning model functions interface mlr-package. function expects siamcat-class-object prepared cross-validation (see create.data.split) data_split-slot object. trains model fold datasplit. machine learning methods require additional hyperparameters (e.g. lasso_ll), optimal hyperparameters tuned function tuneParams within mlr-package. different machine learning methods implemented mlr-tasks: 'lasso', 'enet', 'ridge' use 'classif.cvglmnet' Learner, 'lasso_ll' 'ridge_ll' use 'classif.LiblineaRL1LogReg' 'classif.LiblineaRL2LogReg' Learners respectively 'randomForest' implemented via 'classif.randomForest' Learner. Hyperparameters also additional control machine learning procedure supplying information param.set parameter within function. encourage check excellent mlr documentation -depth information. short overview parameters can supply form: enet alpha parameter describes mixture lasso ridge penalty -per default- determined using internal cross-validation (default equivalent param.set=list('alpha'=c(0,1))). can supply either limits hyperparameter exploration (e.g. limits 0.2 0.8: param.set=list('alpha'=c(0.2,0.8))) can supply fixed alpha value well (param.set=list('alpha'=0.5)). lasso_ll/ridge_ll can supply class.weights cost parameter (cost constraints violation, see LiblineaR info). default values equal param.set=list('class.weights'=c(5, 1), 'cost'=c(10 ^ seq(-2, 3, length = 6 + 5 + 10)). randomForest can supply two parameters ntree (Number trees grow) mtry (Number variables randomly sampled candidates split). See also randomForest info. default values correspond param.set=list('ntree'=c(100, 1000), 'mtry'= c(round(sqrt.mdim / 2), round(sqrt.mdim), round(sqrt.mdim * 2))) sqrt.mdim=sqrt(nrow(data)). Feature selection function can also perform feature selection individual fold. moment, three methods feature selection implemented: 'AUC' - computes Area Receiver Operating Characteristics Curve single feature selects top param.fs$thres.fs, e.g. 100 features 'gFC' - computes generalized Fold Change (see check.associations) feature likewise selects top param.fs$thres.fs, e.g. 100 features Wilcoxon - computes p-Value single feature Wilcoxon test selects features p-value smaller param.fs$thres.fs AUC gFC, feature selection can also directed, means features selected either based overall association (absolute - gFC converted absolute values AUC values 0.5 converted 1 - AUC), associations certain direction (positive - positive enrichment measured positive values gFC AUC values higher  0.5 - reversely negative).","code":""},{"path":"/reference/validate.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate samples in labels, features, and metadata — validate.data","title":"Validate samples in labels, features, and metadata — validate.data","text":"function checks labels available samples     features. Additionally validates metadata, available.","code":""},{"path":"/reference/validate.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate samples in labels, features, and metadata — validate.data","text":"","code":"validate.data(siamcat, verbose = 1)"},{"path":"/reference/validate.data.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Validate samples in labels, features, and metadata — validate.data","text":"siamcat object class siamcat-class","code":""},{"path":"/reference/validate.data.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Validate samples in labels, features, and metadata — validate.data","text":"verbose integer, control output: 0 output , 1 information progress success, 2 normal level information 3 full debug information, defaults 1","code":""},{"path":"/reference/validate.data.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate samples in labels, features, and metadata — validate.data","text":"object class siamcat-class","code":""},{"path":"/reference/validate.data.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate samples in labels, features, and metadata — validate.data","text":"function validates data checking labels     available samples feature matrix. Furthermore,     number samples per class checked ensure minimum     number. metadata available, overlap labels     metadata checked well. function run siamcat-class object created.","code":""},{"path":"/reference/weight_matrix-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"Function retrieve feature weights SIAMCAT object","code":""},{"path":"/reference/weight_matrix-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"","code":"weight_matrix(siamcat, verbose=1)  # S4 method for siamcat weight_matrix(siamcat, verbose = 1)"},{"path":"/reference/weight_matrix-methods.html","id":"pkg-arg-siamcat","dir":"Reference","previous_headings":"","what":"siamcat (argument)","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"siamcat (Required). instance siamcat-class contains trained models","code":""},{"path":"/reference/weight_matrix-methods.html","id":"pkg-arg-verbose","dir":"Reference","previous_headings":"","what":"verbose (argument)","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"verbose integer, slot empty, message printed? values can either 0 (output) 1 (print message)","code":""},{"path":"/reference/weight_matrix-methods.html","id":"section-value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"matrix containing feature weights NULL","code":""},{"path":"/reference/weight_matrix-methods.html","id":"section-details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve the weight matrix from a SIAMCAT object — weight_matrix","text":"function extracts feature weights trained models acorss cross-validation folds repeats.","code":""},{"path":"/news/index.html","id":"major-changes","dir":"Changelog","previous_headings":"","what":"Major changes","title":"Major changes","text":"Include section confounder testing vignette","code":""},{"path":"/news/index.html","id":"minor-changes","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"Minor changes","text":"Bugfixes several functions","code":""},{"path":"/news/index.html","id":"major-changes-1","dir":"Changelog","previous_headings":"","what":"Major changes","title":"Major changes","text":"automatically runs validate.features beginning inputs named flexible label input new slots filtered normalized data new slots assocation testing results original feature slot deprecated almost every function takes arguments type feature operate (original, filtered, normalized) Deprecation read.features read.meta functions New vignettes update old vignettes New functions read data specialized formats Additional plots check.confounders module","code":""}]
